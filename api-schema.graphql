# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreatePostInput {
  content: String!
  title: String!
}

input AdminCreatePriceInput {
  amount: String!
  postId: String!
  token: Token!
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindManyIdentityInput {
  ownerId: String
  provider: IdentityProvider
}

input AdminFindManyPaymentInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyPostInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyPriceInput {
  limit: Int = 10
  page: Int = 1
  postId: String!
  search: String
}

input AdminFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input AdminUpdatePostInput {
  content: String
  title: String
}

input AdminUpdatePriceInput {
  amount: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type AppConfig {
  authDiscordEnabled: Boolean!
  authGithubEnabled: Boolean!
  authGoogleEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
  authSolanaEnabled: Boolean!
  authTwitterEnabled: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Identity {
  challenges: [IdentityChallenge!]
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  url: String
  verified: Boolean
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Twitter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkIdentityInput {
  provider: IdentityProvider!
  providerId: String!
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreatePost(input: AdminCreatePostInput!): Post
  adminCreatePrice(input: AdminCreatePriceInput!): Price
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeletePayment(paymentId: String!): Boolean
  adminDeletePost(postId: String!): Boolean
  adminDeletePrice(priceId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminUpdatePost(input: AdminUpdatePostInput!, postId: String!): Post
  adminUpdatePrice(input: AdminUpdatePriceInput!, priceId: String!): Price
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  anonVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
  login(input: LoginInput!): User
  logout: Boolean
  register(input: RegisterInput!): User
  userCreatePayment(input: UserCreatePaymentInput!): Payment
  userCreatePost(input: UserCreatePostInput!): Post
  userCreatePrice(input: UserCreatePriceInput!): Price
  userDeleteIdentity(identityId: String!): Boolean
  userDeletePost(postId: String!): Boolean
  userDeletePrice(priceId: String!): Boolean
  userLinkIdentity(input: LinkIdentityInput!): Identity
  userUpdatePost(input: UserUpdatePostInput!, postId: String!): Post
  userUpdatePrice(input: UserUpdatePriceInput!, priceId: String!): Price
  userUpdateUser(input: UserUpdateUserInput!): User
  userVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Payment {
  createdAt: DateTime
  id: String!
  signature: String!
  updatedAt: DateTime
}

type PaymentPaging {
  data: [Payment!]!
  meta: PagingMeta!
}

type Post {
  author: User
  authorId: String!
  content: String
  createdAt: DateTime
  id: String!
  payment: Payment
  payments: [Payment!]
  postUrl: String!
  prices: [Price!]
  title: String!
  updatedAt: DateTime
}

type PostPaging {
  data: [Post!]!
  meta: PagingMeta!
}

type Price {
  amount: String!
  createdAt: DateTime
  id: String!
  postId: String!
  token: Token!
  updatedAt: DateTime
}

type PricePaging {
  data: [Price!]!
  meta: PagingMeta!
}

type Query {
  adminFindManyIdentity(input: AdminFindManyIdentityInput!): [Identity!]
  adminFindManyPayment(input: AdminFindManyPaymentInput!): PaymentPaging!
  adminFindManyPost(input: AdminFindManyPostInput!): PostPaging!
  adminFindManyPrice(input: AdminFindManyPriceInput!): PricePaging!
  adminFindManyUser(input: AdminFindManyUserInput!): UserPaging!
  adminFindOnePayment(paymentId: String!): Payment
  adminFindOnePost(postId: String!): Post
  adminFindOnePrice(priceId: String!): Price
  adminFindOneUser(userId: String!): User
  anonRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
  appConfig: AppConfig!
  me: User
  uptime: Float!
  userFindManyAuthoredPost(input: UserFindManyPostInput!): PostPaging!
  userFindManyIdentity(input: UserFindManyIdentityInput!): [Identity!]
  userFindManyPayment(input: UserFindManyPaymentInput!): PaymentPaging!
  userFindManyPublishedPost(input: UserFindManyPostInput!): PostPaging!
  userFindManyUser(input: UserFindManyUserInput!): UserPaging!
  userFindOnePost(postId: String!): Post
  userFindOneUser(username: String!): User
  userRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
}

input RegisterInput {
  password: String!
  username: String!
}

input RequestIdentityChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

enum Token {
  Bonk
  Sol
  Usdc
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  name: String
  profileUrl: String
  publicKey: String
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreatePaymentInput {
  postId: String!
  priceId: String!
  signature: String!
}

input UserCreatePostInput {
  content: String!
  title: String!
}

input UserCreatePriceInput {
  amount: String!
  postId: String!
  token: Token!
}

input UserFindManyIdentityInput {
  username: String!
}

input UserFindManyPaymentInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyPostInput {
  limit: Int = 10
  page: Int = 1
  search: String
  username: String
}

input UserFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdatePostInput {
  content: String
  title: String
}

input UserUpdatePriceInput {
  amount: String
}

input UserUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
}

input VerifyIdentityChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}

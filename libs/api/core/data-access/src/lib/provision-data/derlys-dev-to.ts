import { Prisma } from '@prisma/client'

export const postDerlys: Prisma.PostCreateWithoutAuthorInput[] = [
  {
    title: 'Generar direcciones personalizadas en Solana',
    createdAt: '2024-01-10T17:04:58.900Z',
    id: 'generar-direcciones-personalizadas-en-solana-1na5',
    content:
      'Las direcciones personalizadas dan cierta legibilidad a la cadena aleatoria de letras y números conocida como dirección del monedero Solana.\n\n\n\nSi alguna vez ha realizado una sola transacción en la blockchain Solana, hay una probabilidad muy alta de que haya interactuado antes con una de estas direcciones de vanidad. Algunos de los programas más conocidos utilizan una dirección, como estás:\n\n- [TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA](https://solscan.io/account/TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)- SPL Token program\n\n- [TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb](https://solscan.io/account/TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb)- SPL Token 2022 program\n\n- [whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc ](https://solscan.io/account/whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc)- Orca Whirlpools\n\n- [srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX](https://solscan.io/account/srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX)- Openbook\n\nObservará que cada una de las direcciones de cuenta comienza con algunas palabras legibles (o partes de ellas). Todas son "Vanity Address".\n\n> ¿Inmersión técnica?\n\n> Puede leer todo acerca de [cómo se derivan y generan las direcciones Solana](https://nick.af/articles/derive-solana-addresses) en mi profundización técnica al respecto. Incluyendo la comprensión de la "ruta de derivación" utilizada para generar direcciones vanidad con la Solana CLI. Cosas bastante interesantes 😀.\n\n## Cómo generar una dirección personalizada\n\nLa manera más fácil y común de generar direcciones vanity es usando el [CLI de Solana](https://dev.to/derlys/introduccion-a-la-cli-de-solana-5e1m). Así que eso es lo que voy a demostrar aquí también.\n\n> Instale el Solana CLI\n\n> Si usted no tiene el Solana CLI ya instalada y configurado en su computadora, entonces usted puede leer mi otro artículo sobre [Como Instalar y Configurar el Solana CLI](https://dev.to/derlys/introduccion-a-la-cli-de-solana-5e1m)\n\nAsegúrese de que tiene el programa **solana-keygen** instalado y funcionando ejecutándolo:\n\n```bash\nsolana-keygen --version\n\n# output (note the version)\n# solana-keygen 1.17.6 (src:61caae6b; feat:3073089885, client:SolanaLabs)\n```\n\nAnote la versión que tiene instalada. Esto será importante si desea generar una dirección de vanidad para su uso en carteras web/navegadores como Phantom o Solflare. Más sobre esto en un momento.\n\nUtilizando el programa solana keygen, podemos buscar (es decir, generar por fuerza bruta) nuevas direcciones de vanidad que empiecen por, acaben por, o empiecen Y acaben por determinados caracteres.\n\nPara ver todas las opciones que puede utilizar para generar direcciones vanity aleatorias de Solana, consulte la ayuda de grind:\n\n```\nsolana-keygen grind --help\n```\n\n## Caracteres no admitidos\n\nLas direcciones públicas y las transacciones de Solana funcionan con el juego de caracteres base-58. Es decir, solo hay 58 caracteres posibles:\n\n- incluidas las mayúsculas A-Z, excluidas las mayúsculas **O** e **I**(como en **Oscar** e **India**)\n\n- letras minúsculas de la A a la Z, excepto la **l** minúscula (como en **letter**)\n- dígitos 1-9, (que no incluyen el **0**)\n\nEstas letras específicas están **excluidas** del conjunto de caracteres base-58, ya que pueden confundirse fácilmente con otros caracteres. Y si se utiliza el carácter equivocado, ¡la dirección de la cadena de bloques es completamente diferente!\n\nAsí que cuando intente generar direcciones vanity usando uno de los 4 caracteres no soportados, el CLI de Solana le dará un error.\n\n## Velocidad de generación de las direcciones de vanidad\n\nEn el momento actual, el CLI de Solana solo soporta este método de fuerza bruta para generar direcciones de vanidad con todos los hilos de las CPUs de tu ordenador. Así que cuanto más potente sea tu CPU, menos tiempo tardará.\n\nDato: mi portátil de gama media con una CPU Intel i7 de 8 núcleos puede generar 1.000.000 de direcciones de clave privada cada ~6,3 segundos.\n\nEl otro gran factor que influye en la velocidad de generación de direcciones es la cadena de caracteres que se busca. Cuanto más larga sea la cadena (por ejemplo, 4 caracteres frente a 8 caracteres) y si se ignoran las mayúsculas o minúsculas (por ejemplo, "n" frente a "Nnn"), más tiempo se tardará.\n\nEl último factor importante es si estás intentando generar la frase mnemotécnica o solo la clave privada. Generar la frase mnemotécnica llevará SIGNIFICATIVAMENTE MÁS TIEMPO que sin.\n\nDato: el mismo ordenador del dato anterior puede generar `1.000.000` de direcciones de frases mnemotécnicas cada `~15-20 minutos`. Mucho más tiempo.\n\n## Rectificado básico\n\nPara iniciar el proceso de `grind` buscando una dirección que empiece por una cadena establecida:\n\n```\nsolana-keygen grind --starts-with nemesis:1 --ignore-case\n```\nEste simple comando se ejecutará hasta que se encuentre `1 `dirección de vanidad que empiece por `nemeisis` (ignorando las mayúsculas y minúsculas). Bastante simple.\n\nTambién hay que tener en cuenta que, una vez encontrada una dirección que coincida, la clave privada (en forma de matriz de bytes) se guardará en el directorio de trabajo actual de su terminal con el archivo denominado `<GENERATED_PUBKEY>.json`\n\n## Coincidencia de varias cadenas\n\nEl comando `grind` también le permite especificar múltiples cadenas que desea buscar y comparar. Esta suele ser una forma más eficaz de buscar si está buscando más de una dirección de vanidad posible.\n\nPara buscar y hacer coincidir varias cadenas, basta con especificar varias veces el indicador `--starts-with` o `--ends-with` o `--starts-and-ends-with` (con su valor). Por ejemplo:\n\n```bash\nsolana-keygen grind --ignore-case --starts-with n:2 --starts-with fress:2 --ends-with dominguez:2\n```\n\nEste proceso continuará hasta que se encuentren `2` coincidencias para **CADA** una de las comparaciones de cadena dadas. Al final, se generarán 6 direcciones.\n\n## Generar con frase mnemotécnica\n\n\n\n## Vanidad con ruta mnemotécnica y de derivación\n\nEl uso de la opción `--derivation-path` le permitirá establecer una ruta de derivación personalizada en la CLI de Solana. Si no especifica una ruta de derivación personalizada, este indicador utilizará una ruta codificada de `m/44\'/501\'/0\'/0\'` (que está lista para utilizarse con Phantom y Solflare).\n\nA diferencia del valor predeterminado de la CLI de Solana, la ruta de derivación de `m/44\'/501\'` (que NO es compatible con los monederos de navegador).\n\n```\n./solana/target/release/solana-keygen grind --use-mnemonic --derivation-path --starts-with nick:1 --no-passphrase\n```\n\nSi lo desea, también puede establecer una ruta de derivación personalizada como esta:\n\n```\n./solana/target/release/solana-keygen grind --use-mnemonic --derivation-path m/44/117/0/0 --starts-with nick:1 --no-passphrase\n```\n\n### Añade tu dirección de vanidad en el monedero de tu navegador\n\nEl mnemotécnico resultante de este comando puede introducirse en el monedero de su navegador y funcionará.\n\nA continuación, puede utilizar cualquiera de las otras banderas de `grind` para personalizar las direcciones de vanidad que está buscando, y ser más utilizable en el resto de la blockchain Solana 🙃\n\n## Cómo genero las direcciones personalizadas\n\nLa forma en que me gusta generar direcciones de vanidad con mnemónicos es creando una carpeta `grind_keys` separada en mi ordenador. A continuación, la salida de los mnemónicos generados a un archivo de texto en mi ordenador.\n\nA continuación, envío la salida del proceso a un archivo de texto (también conocido como mnemónico) para su uso posterior.\n\nAsí:\n\n```\nmkdir grinder_keys && cd grind_keys\nmkdir keys && cd keys\n./solana/target/release/solana-keygen grind --no-passphrase --use-mnemonic --derivation-path --ignore-case --starts-with nick:100 --starts-with more:100 >> ../mnemonics.txt\n```\n\nEsto me permite simplemente ejecutar el mismo comando `grind `cada vez que inicio mi ordenador. Así puedo generar direcciones durante periodos de tiempo más largos, como días y semanas, en mi ordenador de sobremesa. Sin miedo a perder la mnemotecnia generada.\n\n\nA excepción de algunos links actualizados y párrafos, este tutorial fue creado en el idioma inglés por [Nick Frostbutter](https://twitter.com/nickfrosty). Muchas gracias por crear este tipo de contenido.\n\nEspero esta traducción le sea de ayuda a la comunidad Hispanohablante que usa [Solana](https://solana.com/) que está creciendo enormemente.\n\nHaz parte de la comunidad [SOLANA LATAM](https://discord.gg/sPVaqarbxY).\n\n[HispanaSol](https://t.me/+Axat5MuV6ow5NWY0)\n\n\n\n',
  },
  {
    title: '2023: El año de la comunidad Solana',
    createdAt: '2023-12-22T14:52:16.862Z',
    id: 'la-comunidad-de-solana-en-2023-cki',
    content:
      '¿Ya estamos en otro Solsticio de Solana? 2023 parece haber pasado volando: un año lleno de acontecimientos, marcado por retos y oportunidades. Y ahora que la comunidad echa la vista atrás, es importante recordar lo lejos que hemos llegado.\n\nEl comienzo de 2023 fue la profundidad de los inviernos más fríos, un momento difícil para la gente en todo el ecosistema Solana y la comunidad blockchain en general. La comunidad Solana no solo se mantuvo firme, sino que se redobló.\n\nUn grito de guerra orgánico, "solo es posible con Solana", resumía la actitud de quienes seguían construyendo. El ecosistema de Solana puede ser el lugar donde las tarifas bajas y el alto rendimiento abren nuevos casos de uso, por supuesto, pero también es el lugar donde una comunidad comprometida, vibrante y orgánica lidera por encima de todo. Los aspectos más destacados y las victorias de 2023 no son obra de ningún equipo ni de ningún individuo, sino que pertenecen al gran colectivo de constructores, artistas, líderes y usuarios que hacen que Solana sea Solana.\n\nSolana les pertenece. De parte de los que trabajamos en la Fundación Solana, gracias.\n\nAsí es como hiciste de 2023 el año de la comunidad de Solana.\n\n## Un resurgimiento liderado por la comunidad\n\nEn diciembre de 2022, la gente empezó a recibir algo extraño en sus carteras (wallets): un token con el logotipo de un shiba inu. Los recibían por usar dApps y proyectos de Solana, por unirse a eventos y por ser participantes activos en la comunidad de Solana.\n\nUn año después, la manía Bonk ha arrasado el mundo de la web3.\n\n{% embed https://twitter.com/bonk_inu/status/1735344728995139609 %}\n\n\nLa historia de Bonk es la historia del renacimiento del ecosistema de Solana en 2023, y de cómo lo lideró la comunidad. Los planes que se habían trazado meses o años antes empezaron a dar sus frutos, y las personas que se quedaron y construyeron durante tiempos inciertos se convirtieron en los nuevos líderes de la comunidad. Tras un año de impulso, el ecosistema de Solana volvió a despegar.\n\nPor ejemplo, 2023 fue el año en que **Saga**, de Solana Mobile, salió al mercado. A pesar de la expectación suscitada por el anuncio y el lanzamiento iniciales, no fue hasta que estalló el entusiasmo de la comunidad cuando el dispositivo móvil web3-nativo, insignia, se agotó en diciembre de 2023.\n\n{% embed https://twitter.com/solanamobile/status/1735835498025832651 %}\n\nEn febrero, la comunidad de Helium votó a favor de migrar de su propia blockchain de capa-1 a Solana. La migración tuvo lugar a finales de marzo... y se produjo sin contratiempos, demostrando que Solana tiene un hogar para los proyectos de infraestructuras descentralizadas y allanando el camino para que futuros equipos den el salto por sí mismos.\n\n{% embed https://twitter.com/helium/status/1648725076571766786 %}\n\nEste ha sido el año de Solana DeFi 2.0: nuevos conjuntos de herramientas y proyectos, liderados por la comunidad descentralizada, que hacen posible la próxima generación de finanzas: **Maple Finance** volvió a Solana con tokenized t-bills; Pyth se trasladó a la gobernanza comunitaria de su Solana Permissioned Environment; TBTC trajo BTC a Solana; **Armada** lanzó una infraestructura de tokens de código abierto; el lanzamiento de múltiples nuevas stablecoins; y mucho más. Hace unos días, el volumen DEX de 24 horas de Solana superó al de Ethereum por primera vez en la historia.\n\n{% embed https://twitter.com/DegenerateNews/status/1735842380257869974 %}\n\nY la infraestructura de validadores dirigida por la comunidad siguió avanzando. Como una de las cadenas más descentralizadas en web3 por el coeficiente de Nakamoto, los clientes validadores alternativos como **Firedancer** de Jump Crypto, el cliente de **Jito Labs** y **Tinydancer **continuaron diversificando y asegurando la pila tecnológica de Solana.\n\n{% embed https://twitter.com/solana/status/1719310929593057720 %}\n\n## Desarrolladores que innovan\n\nLas innovaciones dentro del ecosistema Solana avanzaron a un ritmo vertiginoso en 2023, ya que los equipos colaboraron para introducir nuevos estándares y herramientas para toda la comunidad. Quizá nada lo ejemplifique mejor que el equipo de todo el ecosistema que trabaja para implantar la compresión de estados, una innovación que utiliza árboles de Merkle para reducir significativamente el coste del alquiler en la red Solana.\n\n{% embed https://twitter.com/solana/status/1643972968433975296 %}\n\nDel mismo modo, Solana Labs introdujo un plugin que permitía a la IA interactuar con la cadena de bloques Solana, permitiendo a los desarrolladores crear herramientas útiles que unían el poder de la cadena de bloques y la inteligencia artificial.\n\n{% embed https://twitter.com/solanalabs/status/1650955017585606656 %}\n\nNo sólo trabajaron los grandes equipos: la comunidad de desarrolladores de Solana siguió creciendo. Dos [hackathones de Solana](https://solana.com/hackathon), **Grizzlython** e **Hyperdrive**, registraron un número récord de solicitudes y propuestas. En Hyperdrive se presentaron más de 900 proyectos, el mayor número hasta la fecha, a pesar de las difíciles condiciones del mercado.\n\n{% embed https://twitter.com/mattytay/status/1720579154737873218 %}\n\nTodo se debe a que la experiencia de los desarrolladores al construir sobre Solana sigue mejorando: en lugar del viejo meme de que construir sobre la blockchain Solana es como masticar vidrio, hoy es más como surfear sobre vidrio. Los **nuevos recursos y herramientas para desarrolladores** han permitido a miles de desarrolladores crear la aplicación descentralizada de sus sueños. Más información en [el portal para desarrolladores de Solana.com](https://solana.com/developers)\n\n{% embed https://www.youtube.com/watch?v=zTddk2pf2yI %}\n\n## Las instituciones se apoyan en Solana\n\nA medida que la vibrante comunidad de Solana proseguía su labor, las instituciones empezaron a tomar nota. En 2023, varias grandes empresas y firmas tradicionales empezaron a explorar el ecosistema de Solana.\n\nEn abril, **Mastercard**, en colaboración con la Fundación Solana, trabajó en herramientas para ayudar a asegurar las transacciones entre instituciones web2 y web3.\n\n{% embed https://twitter.com/MastercardNews/status/1652003395052380160 %}\n\n**Visa** amplió su programa piloto de stablecoin USDC a la red Solana, tras meses de investigación exhaustiva sobre la pila tecnológica y las ventajas de la cadena de bloques Solana.\n\n{% embed https://twitter.com/cuysheffield/status/1699031109080945049 %}\n\nSolana Pay, un protocolo de pagos entre pares descentralizado y de código abierto construido sobre la cadena de bloques Solana por Solana Labs, se integró con **Shopify** - desbloqueando pagos USDC a millones de empresas como una integración de aplicación aprobada.\n\n{% embed https://twitter.com/solana/status/1694336131599393186 %}\n\n**Boba Guys**, una popular tienda de té, llevó a cabo una prueba piloto de su programa de fidelización basado en Solana en una tienda de San Francisco. ¿Los resultados? [Un 67% más](https://cointelegraph.com/news/boba-guys-shopify-users-showcase-adoption-web3-tools-solana-breakpoint) de visitas mensuales entre los participantes en el programa de fidelización y un 65% más de consumo. El programa se extendió a todo el país en noviembre.\n\n{% embed https://www.youtube.com/watch?v=yoZ2eF6Na7w %}\n\nMás allá de los productos dirigidos a consumidores y empresas, las grandes instituciones de infraestructuras también empezaron a integrar el soporte para la blockchain Solana. **Google Cloud** integró los datos de [Solana onchain en BigQuery](https://solana.com/news/solana-data-live-on-google-cloud-bigquery), desbloqueando nuevos casos de uso.\n\n{% embed https://twitter.com/googlecloud/status/1680654353357582337 %}\n\n**Amazon Web Services** también anunció que la [compatibilidad con los nodos de red Solana](https://solana.com/news/solana-blockchain-node-development-blueprints-available-on-aws) estaba disponible para su despliegue.\n\n{% embed https://www.youtube.com/watch?v=wqADZnNPSV0 %}\n\n## Reunirse IRL (In real life)\n\nA pesar de las frías condiciones de la industria, en 2023 la comunidad de Solana tomó el mando. En ningún lugar esto fue más evidente que en las reuniones de la vida real de creadores, usuarios y fanáticos del ecosistema de Solana que tuvieron lugar en todo el mundo.\n\n**Breakpoint**, la conferencia anual de la comunidad Solana organizada por la Fundación Solana, congregó a más de 3.000 asistentes en el Campus Solana, a las afueras de Ámsterdam, durante una semana de construcción y creación de redes. Pero fueron los actos organizados por la comunidad que proliferaron en el campus y fuera de él, desde conferencias como **Block Zero**, **DRiP Haus** y **The Network State** hasta actos paralelos de **Superteam** y otros proyectos del ecosistema, los que encarnaron el verdadero espíritu comunitario.\n\n{% embed https://www.youtube.com/watch?v=0MoYSUxYDFk %}\n\n**Las Solanas Hacker Houses**, que muestran el trabajo del ecosistema Solana en ciudades de todo el mundo, vieron a más de 6.000 desarrolladores enviar y aprender colectivamente\n\n{% embed https://twitter.com/hackerhouses/status/1620458593563574277 %}\n\n**AthensDAOx**, un evento organizado por el equipo de DeansListDAO, causó sensación con un fin de semana centrado en la gobernanza.\n\n{% embed https://twitter.com/Cointelegraph/status/1734927545156669615 %}\n\nMientras tanto, **Solana Crossroads** -una conferencia independiente en Estambul, organizada por Step Finance- mostró la creciente comunidad de constructores en Turquía.\n\n{% embed https://twitter.com/SolanaCrossroad/status/1649042474449637382 %}\n\n**mtnDAO**, el hacker house comunitario de Salt Lake City, acogió una semana de talleres, aprendizaje y mucho más sobre el ecosistema Solana.\n\n{% embed https://twitter.com/mtndao/status/1625981076593348608 %}\n\nLa comunidad de creadores del ecosistema Solana [hizo su debut](https://solana.com/art-basel) en **Art Basel Miami Beach**, con artistas que organizaron estudios y crearon piezas en directo y experiencias organizadas por equipos de apoyo a los creadores de todo el ecosistema Solana.\n\n{% embed https://twitter.com/sofiagarcia_io/status/1734653445171273838 %}\n\nEstos eventos no fueron los únicos. Desde festivales como **PlayGG** hasta **reuniones informales de la comunidad, desde Vancouver hasta Tokio**, la comunidad Solana demostró su fuerza en todo el mundo.\n\n## ¿Y ahora qué?\n\nSegún todos los indicios, la comunidad de Solana no ha hecho más que empezar. Si 2023 fue el año del renacimiento del ecosistema de Solana, 2024 volverá a ser el verano de Solana.\n\nPero para que eso ocurra, la comunidad tiene que liderar, construir y seguir avanzando. Es un momento emocionante para el ecosistema Solana, con nuevos proyectos y noticias que aparecen a diario. Pero todo depende de ti.\n\nEl impulso hacia adelante que la comunidad Solana está experimentando en este momento puede continuar, pero requiere un enfoque implacable y priorización.  Sigue escribiendo código innovador, sigue creando la próxima generación de arte, sigue esforzándote por encontrar el próximo caso de uso en el mundo real y sigue mostrando al mundo el poder de una blockchain que se mueve a la velocidad de la luz.\n\nEl mejor momento para dar el paso y comenzar su proyecto Solana es ahora. ¿Qué vas a construir?\n\n\nEste tutorial fue creado en el idioma inglés por [Solana](https://solana.com/news/solana-solstice-2023-community-review).\n\nEspero esta traducción le sea de ayuda a la comunidad Hispanohablante que usa [Solana](https://solana.com/) que está creciendo enormemente.\n\nHaz parte de la comunidad [SOLANA LATAM](https://discord.gg/sPVaqarbxY).\n',
  },
  {
    title: 'Configurar Solana en Linux',
    createdAt: '2023-12-18T17:14:49.768Z',
    id: 'configurar-solana-en-linux-5f70',
    content:
      '---\nseries: Solana\n---\n\nEn este tutorial vamos a: Instalar las herramientas, crear una billetera local y crear un ejemplo de hola mundo. Programa para probar que está correctamente configurado.\n\nConfigure su entorno de desarrollo Solana en Linux con esta guía de instalación completa\n\nPara configurar e instalar Solana en Linux, necesitará para instalar lo siguiente:\n\n- NodeJS y Yarn\n- Varios paquetes y bibliotecas del sistema Linux\n- Rust and Cargo (usando Rustup)\n- El conjunto de herramientas CLI de Solana\n- El marco `Anchor` (no es realmente necesario, ¡pero sí muy recomendable!)\n\n> Aviso: Es posible que se encuentre con errores del compilador o del generador durante el proceso de configuración, dependiendo de qué bibliotecas y dependencias ya tenga su sistema Linux instalado.\n\n## Instalar NodeJS y Yarn\n\nSeamos realistas, el mundo de web 3 y blockchain se está construyendo con Aplicaciones basadas en JavaScript/TypeScript. De los cuales, NodeJS y el paquete NPM  está a la vanguardia.\n\nAsí que simplemente [instala NodeJS](https://nodejs.org/en) (si eres uno de esos desarrolladores cripto curiosos que aún no lo tienen instalado). En Linux/Ubuntu, recomiendo instalar NodeJS usando [administrador de versiones de nodo](https://github.com/nvm-sh/nvm)(también conocido como NVM). ¡Actualizar las versiones de Node es lo más sencillo posible!\n\nA continuación, recomiendo encarecidamente instalar el [Administrador de paquetes de Yarn](https://www.npmjs.com/package/yarn). Mucha gente está usando `Yarn` en el ecosistema Solana. (¡[Incluyéndome](https://twitter.com/derlys_paola) y al equipo `Anchor`!):\n\n```terminal\nnpm i -g yarn\n```\n## Instalar librerías y paquetes de Linux\n\nPara comenzar esta fiesta de Solana, asegúrese de que su sistema Linux esté actualizado:\n\n```terminal\nsudo apt-get update && sudo apt-get upgrade\n```\nCada distribución de Linux es diferente. Y dependiendo del tipo de Linux que uses se están ejecutando, es posible que necesite instalar más o menos paquetes adicionales en tu sistema.\n\nLa instalación de los siguientes paquetes debería cubrir la mayoría de los casos para sistemas basados ​​en Ubuntu o Debian:\n\n```terminal\nsudo apt-get install -y pkg-config build-essential libudev-dev libssl-dev\n```\n> Nota: En el pasado usaba Edición Parrot OS Home (Debian y apt) como mi conductor diario, y estos paquetes también eran necesarios para comenzar en el desarrollo de Solana.\n\nLas personas a menudo se encuentran con varios errores al configurar la variedad de Solana. Herramientas de desarrollo en sistemas operativos basados ​​en Linux como Ubuntu o Parrot OS (que es lo que me gusta usar). Esto generalmente se debe a que falta en su sistema algunas dependencias diversas. Lo bueno es que si tienes algún problema al instalar o crear programas Solana, `Anchor` y/o `Solana`, su salida del terminal suele ser lo suficientemente descriptiva como para indicarle qué paquete/dependencia te falta. ¡Hermoso!\n\n## Instalar Rust y Cargo\n\n```terminal\ncurl --proto \'=https\' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nA medida que avanza a través de este asistente de instalación de `Rust`, se le dará algunas opciones al instalar. Cuando se le solicite, recomiendo seleccionar la opción de construcción `nocturna`(nightly). Esto parece funcionar mejor con el conjunto de herramientas Solana CLI.\n\n> Nota: Este comando de instalación de `Rustup` proviene directamente del sitio web [Rustup.rs](https://rustup.rs/).\n\n## Instale la CLI de Solana\n\n```terminal\nsh -c "$(curl -sSfL https://release.solana.com/stable/install)"\n```\n> Nota: Este comando de instalación para el conjunto de herramientas Solana CLI proviene directamente de los documentos oficiales de Solana.\n\n## Instalar Anchor Lang para Solana\n\nAnchor es el framework más popular para crear programas Solana. Es un proyecto de código abierto que puede ayudar a simplificar tus programas, además de hacerlos más seguros.\n\n> Nota: El equipo de Anchor recomienda [instalar Anchor](https://www.anchor-lang.com/docs/installation) usando la herramienta Anchor Version Manager, AVM, ¡así que eso es lo que usaremos aquí! Este proceso construirá AVM desde el código fuente y puede llevar un poco de tiempo, dependiendo del hardware de tu ordenador.\n\nUna vez que haya instalado Cargo, puede instalar AVM con el siguiente comando:\n\n```terminal\ncargo install --git https://github.com/coral-xyz/anchor avm --locked --force\n```\nA continuación, podemos usar `AVM` para instalar `Anchor CLI` (esto puede tardar un poco), ya que `Cargo` compilará la CLI durante la instalación):\n\n```terminal\navm install latest\n```\nFinalmente, indique que configure la última versión de `Anchor` como predeterminada de su sistema y verifique tu versión:\n\n```terminal\navm use latest && anchor --version\n```\n## Crea una billetera Solana local\n\nUna de las últimas cosas que necesitará desarrollar (más específicamente implementar) Los programas Solana son una billetera. No profundizaré en los detalles del uso de la Solana CLI aquí, sino más bien una comprensión superficial de los comandos para empezar a desarrollar.\n\n\n## TLDR;\n\nLas billeteras del sistema de archivos guardarán la clave privada de su billetera en un archivo local en su computadora\ndebe seleccionar la red Solana correcta que desea mediante la CLI necesitarás enviar el token SOL a tu billetera\n\n\n## Crear una billetera Solana\n\nCree una nueva billetera del sistema de archivos llamada "demo-wallet":\n\n```terminal\nsolana-keygen new --outfile ~/.config/solana/demo-wallet.json\n```\n## Seleccione la red Solana\n\nSeleccione Solana "testnet" red y configure su nueva billetera del sistema de archivos como la predeterminada:\n\n```terminal\nsolana config set --url testnet --keypair ~/.config/solana/demo-wallet.json\n```\n## Verifique sus ajustes de configuración\n\nLea la configuración de su CLI de Solana para verificar que su billetera esté correctamente configurado y estás en la red correcta:\n\n```terminal\nsolana config get\n```\n\nEl resultado debería ser algo parecido a esto:\n\n```terminal\nConfig File: /Users/derlys/.config/solana/cli/config.yml\nRPC URL: https://api.devnet.solana.com\nWebSocket URL: wss://api.devnet.solana.com/ (computed)\nKeypair Path: /Users/derlys/.config/solana/id.json\nCommitment: confirmed\n```\n> Yo utilice la red `devnet` que es donde puedes hacer pruebas y solicitar `airDrop`(sol para para probar tus DApps). En la `testdev` también puedes solicitarlos sin embargo se usa mas que todo para comprobar que tus transacciones esten llegando correctamente.\n\n## Financia tu billetera con un AirDrop\n\nObtenga un token SOL gratuito lanzado desde el AirDrop (también conocido como depositado) en su nueva billetera:\n\n```terminal\nsolana airdrop 1 <RECIPIENT_ACCOUNT_ADDRESS>\n```\n\n> si ejecutas el comando sin especificar la direccion( publickey) te carga los soles en la billetera (wallet) que tengas configurada por defecto.\n\n\nPara comprobar el saldo de la billetera de su sistema de archivos:\n\n```terminal\nsolana balance <RECIPIENT_ACCOUNT_ADDRESS>\n```\n## ¿Qué sigue?\n\nAhora que tiene todas las herramientas de desarrollo de Solana necesarias instaladas en su entorno local, ¡está listo para comenzar a crear sus primeros programas Solana!\n\n[Introducción a Solana CLI](https://dev.to/derlys/introduccion-a-la-cli-de-solana-5e1m): obtenga más información sobre comandos importantes y cómo navegar por la CLI de Solana.\n\nImplemente un programa Solana (próximamente): cree, edite, implemente y vuelva a implementar su primer programa Solana para blockchain.\n\nA excepción de algunos links y párrafos, este tutorial fue creado en el idioma inglés por [Nick Frostbutter](https://twitter.com/nickfrosty). Muchas gracias por producir este tipo de contenido.\n\nEspero esta traducción le sea de ayuda a la comunidad Hispanohablante que usa [Solana](https://solana.com/) que está creciendo enormemente.\n\nHaz parte de la comunidad [SOLANA LATAM](https://discord.gg/sPVaqarbxY).\n\n',
  },
  {
    title: 'Introducción a la CLI de Solana',
    createdAt: '2023-12-13T16:45:24.762Z',
    id: 'introduccion-a-la-cli-de-solana-5e1m',
    content:
      '---\nseries: "Solana"\n---\nComo parte de su viaje de desarrollo de Solana, deberá familiarizarse con la CLI de Solana.\n\nEs muy poderoso y muy importante comprender algunos comandos para realizar algunas tareas específicas:\n\n1️⃣ Crear billeteras\n2️⃣ Actualizar la configuración de su red Solana\n3️⃣ SOL gratuito desde el AirDrop (también conocido como fondos en su cuenta)\n4️⃣ Ejecutar un validador de prueba\n5️⃣ Implementar programas Solana\n\n> PD: También hay un [video de YouTube](https://www.youtube.com/watch?v=pNzT3hgFbpg) para este tutorial de Solana.\n\n## Aprenda a utilizar la CLI de Solana\n\n> Esta guía asume que ya tiene instalada la CLI de Solana. Si no es así, [consulte esta guía sobre cómo instalar Solana CLI en  Linux](https://solanacookbook.com/es/getting-started/installation.html#instalacion-de-cli).\n\n## Crea una billetera Solana para el desarrollo\n\nPara implementar programas Solana en la cadena de bloques (ya sea un validador local o un RPC remoto), necesitará crear una billetera Solana.\n\nPara simplificar, generaremos una billetera con sistema de archivos que almacenará nuestra clave privada (privateKey) en un archivo en su computadora. De esta manera, podemos decirle fácilmente a Solana CLI y/o Anchor CLI que usen esta billetera para implementar nuestros programas Solana.\n\nLa billetera del sistema de archivos predeterminada generalmente se encuentra en `~/.config/solana/id.json`. \n\nCuando crea nuevas wallets de sistema de archivos, puede especificar cualquier ubicación de archivo específica con el indicador `--outfile /path/to/file `.\n\nPara generar una nueva wallet (billetera) Solana utiliza este comando:\n\n```terminal\nsolana-keygen new --outfile ~/.config/solana/solfate-dev.json\n```\n\nAl generar cada wallet (billetera), también puedes establecer una frase de contraseña (como un archivo de claves SSH).\n\n> ¡RECOMIENDO ENCARECIDAMENTE establecer una frase de contraseña para la billetera, especialmente para cualquier billetera que pueda usar en producción en algún momento!\n\n\n>> Para efectos de este tutorial he decidido no usar esta frase de contraseña.\n\nUna vez creada su billetera, obtendrá una lectura de su ` pubkey` (también conocida como dirección de su billetera) y su frase inicial. No olvides escribir tu frase inicial en un lugar seguro si realmente vas a conservar esta dirección de billetera.\n\n## Lea la configuración de Solana\n\nPara lograr cualquier cosa en la cadena de bloques de Solana, incluso con un validador de prueba local, deberá asegurarse de que su CLI de Solana esté configurada para conectarse a la red Solana RPC correcta y con la billetera correcta.\n\nPara ver la configuración actual de Solana CLI, ejecute este comando:\n\n```terminal\nsolana config get\n```\n\nDebería obtener una lectura como esta:\n\n`Config File: /home/nick/.config/solana/cli/config.yml\nRPC URL: https://api.testnet.solana.com\nWebSocket URL: wss://api.testnet.solana.com/ (computed)\nKeypair Path: /home/nick/.config/solana/id.json\nCommitment: confirmed`\n\nLas configuraciones son MUY importantes son la `URL RPC` y el archivo `Keypair Path`.\n\nRPC URL: le indica a la CLI a qué [clúster](https://solanacookbook.com/es/core-concepts/transactions.html#hechos) de red Solana desea conectarse. Generalmente, para el desarrollo local, debe configurar su propio validador de pruebas local (también conocido como localnet). Solo los RPC de la “red principal” utilizarán realmente tokens SOL reales y, por lo tanto, dinero real.\n\nKeypair Path: la clave privada de la billetera (como la que creamos anteriormente) para usar para implementar programas e interactuar con el RPC.\n\n## Actualice su configuración de Solana\n\nCuando desee cambiar la configuración de su red Solana o cambiar el archivo de clave de billetera predeterminado, deberá actualizar su configuración con la CLI de Solana.\n\nAl configurar su URL RPC (también conocido como cambiar su red Solana), puede usar el nombre corto de la red (como “mainnet”, “testnet”, etc.) o la URL completa para un nodo RPC activo:\n\n```terminal\nsolana config set --url testnet\n```\n\nPara cambiar el archivo de la clave de billetera que utiliza la CLI:\n\n```terminal\nsolana config set --keypair /path/to/file\n```\n\n## Consulta el saldo de tu billetera\n\nNecesitará SOL para interactuar con la cadena de bloques, incluso durante el desarrollo. Siempre puede consultar fácilmente el saldo de su billetera (o la de cualquier persona) utilizando la CLI de Solana.\n\nPara verificar el saldo de la dirección de su billetera configurada por CLI (también conocida como la que ha configurado con el archivo de claves de su sistema de archivos):\n\n```terminal\nsolana balance\n```\n\nPara consultar el saldo de cualquier otra billetera:\n\n```\nsolana balance WALLET_ADDRESS_HERE\n```\n\n> El comando `solana balance `solo verificará el saldo de la billetera determinada en la red Solana actualmente seleccionada.\n\n## Financia tu billetera a través de AirDrop\n\nCon su nueva configuración de billetera y seleccionada en la red RPC correcta, deberá depositar fondos en su billetera con SOL.\n\nEste SOL se utilizará para implementar programas en la cadena de bloques, así como para pagar el alquiler y las transacciones mientras desarrolla programas.\n\nPeriódicamente, a medida que implemente o interactúe con los programas de Solana, deberá financiar su billetera con SOL (el token nativo de Solana).\n\nPuede depositar fondos en su cuenta utilizando dos métodos:\n\n1. AirDrop a través de Solana CLI\n\nPara solicitar un AirDrop gratuito a su billetera seleccionada actualmente:\n\n```terminal\nsolana airdrop 1\n```\n\n> El comando `solana airdrop` de solana tiene un límite en la cantidad de SOL que se puede lanzar. Cualquier solicitud que supere este límite hará que la transacción falle. Al momento de escribir esto, el límite es 5.\n\nTal como habrás adivinado, el AirDrop se producirá en la red que estás seleccionado en la configuración de Solana. Y no, el lanzamiento aéreo no funciona en la red principal. No seas tonto.\n\n2. AirDrop a través de Solfate faucet\n\nOtra manera fácil de obtener su SOL devnet y/o testnet gratuito en su billetera es usar un grifo público. Aquí en Solfate operamos un grifo público [Solana faucet](https://faucet.solana.com/).\n\nTodo lo que necesita hacer es ingresar la dirección de su billetera y hacer clic en el botón de la red Solana que desee: devnet o testnet.\n\n## Ejecute el validador de pruebas de Solana\n\nComo mencioné anteriormente, cuando desarrolle sus programas Solana localmente, lo más probable es que desee ejecutar una versión de host local de la cadena de bloques Solana llamada “validador de prueba”(test validator). Tal como puede pensar, esto le permitirá tener una versión completa de la cadena de bloques Solana directamente en su computadora local.\n\nEjecutar y desarrollar usando el validador de pruebas es excelente (y recomendado) por varias razones:\n\n- Transacciones aún más rápidas (¡tú eres el único que las realiza!)\n- Menor riesgo de transacciones rechazadas\n- sin limitación desde puntos finales RPC públicos\n- fácil acceso a los registros del programa Solana (a través de la macro "msg" en Rust)\n\nPara ejecutar el validador de pruebas de Solana, abra una nueva ventana de terminal y ejecute el siguiente comando:\n\n```terminal\nsolana-test-validator\n```\n\nEsta red localhost, también conocida como “localnet”, que se ejecuta en su terminal, enviará todos los mensajes que su programa Solana envíe a la cadena de bloques. Lo cual es una excelente manera de ayudar a depurar sus programas.\n\nA excepción de algunos links actualizados y párrafos, este tutorial fue escrito en el idioma inglés por [Nick Frostbutter](https://twitter.com/nickfrosty). Muchas gracias por crear este tipo de contenido.\n\nEspero esta traducción le sea de ayuda a la comunidad Hispanohablante que usa [Solana](https://solana.com/) que está creciendo enormemente.\n\nHaz parte de la comunidad [SOLANA LATAM](https://discord.gg/sPVaqarbxY).\n\n[HispanaSol](https://t.me/+Axat5MuV6ow5NWY0)\n\n',
  },
  {
    title: 'Tutorial 2: Creando una aplicación Angular V17 con Tailwind',
    createdAt: '2023-12-03T15:26:55.869Z',
    id: 'creando-una-aplicacion-angular-v17-con-tailwind-21c2',
    content:
      '---\ntitle: Tutorial 2: Creando una aplicación Angular V17 con Tailwind\npublished: true\ndescription: \nseries: Caja de Herramientas del Desarrollador\ncover_image: "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tnqjc63exhfxfnfxi1q.png"\n# Use a ratio of 100:42 for best results.\n# createdAt: 2023-11-29 19:23 +0000\n---\n\nEn este tutorial, aprenderás a usar Tailwind para dar estilo a aplicaciones Angular CLI.\n\nEl objetivo es construir un diseño de aplicación con un encabezado y pie de página con sus respectivas rutas.\n\n## Requisitos\n\nAsegúrate de tener las siguientes herramientas instaladas:\n\n- Node JS y NPM, visite [su página](https://nodejs.org/en/) para ver las instrucciones.\n - Ejecute node -v para verificar que tiene la versión 20 o superior.\n - Ejecute `npm -v` para comprobar que tiene la versión 10 o superior.\n- Angular CLI (npm install -g @angular/cli)\n - Ejecute `ng version` para revisar que tiene la versión 17.\n\nSi prefiere usar `yarn`, [primero configure el administrador de paquetes predeterminado de Angular CLI](https://dev.to/ruslangonzalez/configurar-yarn-en-tus-proyectos-de-angular-video-goj). Esto asegura que la aplicación generada tenga un archivo `yarn.lock` en lugar de un `paquete-lock.json`.\n\n## 1. Crea una nueva aplicación\n\nAbra una terminal y ejecute el siguiente comando:\n\n```\nng new angular17\n```\nEl comando `ng new` genera una aplicación Angular básica en una carpeta llamada `angular17` e instala las dependencias.\n\nLa ejecución de este comando te da un recorrido por varias preguntas que configuran tu app con los estilos que quieras.\n\n![Styles](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2n97mne065c4guwvnck.png)\n\nAdemás, una de las nuevas actualizaciones de Angular V17 es que nos permite desde el comienzo crear nuestro `server side rendering` algo increíblemente útil.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbwrtm1ki1mp51se8z1c.png)\n\nAl final de la configuración, la CLI de Angular también inicializa un repositorio git y hace un commit inicial.\n\n## 2. Abrir la aplicación en modo de desarrollo\n\nDespués que la instalación haya finalizado, ejecuta el siguiente comando e ingresa a la carpeta de tu proyecto.\n\n```\ncd angular17\n```\n\nEn la carpeta del proyecto tú puedes iniciar el servidor de desarrollo usando el comando  `ng serve`.\n\n> ** El servidor de desarrollo de Angular utiliza el `localhost:4200`, abre tu navegador en [localhost:4200](ocalhost:4200)**\n\nHaz clic en el enlace anterior y comprueba que funciona. ¡Ahora si la aplicación está lista para utilizar algunos estilos 🤗!\n\n## 3. Instala Tailwind\n\nEjecuta los siguientes dos comandos en la carpeta de tu proyecto para instalar Tailwind.\n\n```\nyarn add -D tailwindcss postcss autoprefixer\nyarn add tailwindcss init\n```\nDespués que finalice el proceso, abre el archivo `tailwind.config.js` y agrega lo siguiente:\n\n```javascript\n/** @type {import(\'tailwindcss\').Config} */\nmodule.exports = {\n  content: [\n    "./src/**/*.{html,ts}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\nAbre el archivo `styles.css` y agrega las siguientes directivas:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n> Si quieres comprobar que Tailwind se instalo haz un cambio pequeño en tu `app.component.html`, prueba agregando esto:\n\n```html\n<h1 class="text-3xl font-bold underline">\n  Hello world!\n</h1>\n```\n\n>> MD Tip 💡\n> Recuerda que no debes eliminar la etiqueta `<router-outlet></router-outlet>`.\n\n>>MDato 🗃️\n> Angular ahora no tiene modulos y en los siguientes pasos del tutorial te daras cuenta por que\n\n## 4. Configura el layout de la aplicación\n\nEn este paso generaremos 3 componentes `layout`, `header` y `footer` dentro de una carpeta llamada `ui`.\n\n>💡 Es una buena idea mantener la UI (Interfaz de ususario) separada del resto de la aplicacion. Esta `Separacion de tareas` tambien te permite reutilizar facilmente la UI en otros proyectos.\n\nEjecuta el comando: \n\n```\nng generate component ui/layout\n```\n\nEsto te generará una carpeta que se llama `ui` y dentro de esta un componente llamado `layout`.\n\nA partir de aquí crearemos el componente `header` y ` footer` dentro de esta carpeta, ejecutando estos 2 comandos:\n\n```\nng generate component ui/header\nng generate component ui/footer\n\n```\n\n> MDato\n> 💡 El comando `ng generate` acepta abreviaturas: usa `ng g c` Para generar un componente, `ng g s` para generar un servicio, etc.\n\n## 4.1 Implementa el LayoutComponent\n\nAbre `src/app/ui/layout/layout.component.html` y remplaza su contenido por lo siguiente:\n\n```html\n<div class="flex flex-col h-full justify-between">\n  <app-header></app-header>\n  <div class=\'flex-grow  py-4 px-16 text-center bg-pink-300 \n    text-pink-900 \'>\n    <div class="text-pink-500 text-3xl">\n    <router-outlet></router-outlet>\n    </div>\n  </div>\n  <app-footer></app-footer>\n</div>\n```\n> Vas a notar que las etiquetas de `header` ` footer` y `router-outlet` se colocan rojas, eso es porque debes importarlas en el respectivo componentes donde las uses\n\nAbre `src/app/ui/layout/layout.component.ts` y agrega esto en los imports:\n\n```typescript\nimport { Component } from \'@angular/core\';\nimport {HeaderComponent} from \'../header/header.component\'\nimport {FooterComponent} from \'../footer/footer.component\'\nimport {RouterOutlet} from \'@angular/router\'\n\n@Component({\n  selector: \'app-layout\',\n  standalone: true,\n  imports: [HeaderComponent,FooterComponent, RouterOutlet],\n  templateUrl: \'./layout.component.html\',\n  styleUrl: \'./layout.component.scss\'\n})\nexport class LayoutComponent {\n\n}\n```\n\n## 4.2 Usa el LayoutComponent\n\nAbra el archivo `src/app/app-routes.ts` y agrega el siguiente código que es una lista de objetos que irán dentro del array de `routes`.\n\n```typescript\n{\n    path: \'\',\n    component: LayoutComponent,\n    children: [\n      // Here we will add our application pages\n    ],\n  },\n```\n\nPara que puedas usar el LayoutComponent debes importarlo en este mismo archivo en la parte superior.\n\n```typescript\nimport {LayoutComponent} from \'./ui/layout/layout.component\'\n```\nAbre el archivo `app.component.html` y deja solo la etiqueta `router-outlet`.\n\nGuarda y deberías ver en tu navegador el  `HeaderComponent`\ny `FooterComponent` renderizados.\n\n## 4.3 Implementa el Header\n\nAbre el archivo `header.component.html` y pega este código\n\n```html\n<div class=\'p-4 bg-violet-900 text-violet-300\'>\n  <div class="flex justify-between align-items">\n    <div>LOGO</div>\n    <div class="flex space-x-4">\n     \n      <a\n        routerLinkActive="active" routerLink="/home" \n        class="bg-pink-500 text-white rounded-md px-3 py-2 \n        text-sm font-medium" aria-current="page">Home</a>\n      <a\n        routerLinkActive="active" routerLink="/blog" \n        class="text-gray-300 hover:bg-pink-500 hover:text- \n        white rounded-md px-3 py-2 text-sm font- \n        medium">Blog</a>\n      <a\n        routerLinkActive="active" routerLink="/contact" \n        class="text-gray-300 hover:bg-pink-500 hover:text- \n        white rounded-md px-3 py-2 text-sm font- \n        medium">Contact</a>\n    </div>\n  </div>\n</div>\n\n```\n\nImporta `RoterLink` y `RoterLinkActive` en el archivo `header.component.ts`.\n\n```\n imports: [RouterLink, RouterLinkActive],\n```\n\n\n## 4.4 Implementa el Footer\n\nAbre el archivo `footer.component.html` y pega este código\n\n```html\n<div class=\'p-4 text-center bg-violet-900 text-violet-300\'>\n  COPYRIGHT &copy; 2069\n</div>\n```\n\n## 5. Agrega páginas a tu aplicación\n\nCon el layout en su lugar es momento de agregar páginas a nuestra app.\n\nEjecuta el siguiente comando:\n\n```\nng g c pages/home\n```\n\nAbre el siguiente archivo en la ruta `src/app/pages/home/home.component.html` y remplaza el contenido por esto:\n\n```html\n<div class="bg-white px-6 py-24 sm:py-32 lg:px-8">\n  <div class="mx-auto max-w-2xl text-center">\n    <h2 class="mt-2 text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">This is my home</h2>\n    <p class="mt-6 text-lg leading-8 text-gray-600">Anim aute id magna aliqua ad ad non deserunt sunt. Qui irure qui lorem cupidatat commodo. Elit sunt amet fugiat veniam occaecat fugiat aliqua.</p>\n  </div>\n</div>\n\n```\n\n> Recuerdas que habiamos configurado nuestro layout en el archivo `app-routes.ts` \n\nAgrega tu primera ruta`Home` que es hija del layout el cual es compartido en cualquiera de las rutas, copia y pega lo siguiente el archivo `app-routes.ts` dentro del array`children:`\n\n```typescript\n{ path: \'home\', component: HomeComponent },\n```\n\nY ahora, si das clic en la ruta `Home` en tu navegador te mostrará el `Homecomponent` que acabaste de diseñar en el punto anterior.\n\n> MDato 🗃️\n> Puedes investigar mas acerca de rutas hijas o Nesting routes [aqui](https://angular.dev/guide/routing/common-router-tasks#nesting-routes)\n\n## 5.1  Crea la página blog\n\nEjecuta el comando:\n\n```\nng g c pages/blog\n```\nAbre el archivo `blog.component.html` y copia esto:\n\n```html\n<section class="relative isolate overflow-hidden bg-white px-6 py-24 sm:py-32 lg:px-8">\n  <div class="absolute inset-0 -z-10 bg-[radial-gradient(45rem_50rem_at_top,theme(colors.indigo.100),white)] opacity-20"></div>\n  <div class="absolute inset-y-0 right-1/2 -z-10 mr-16 w-[200%] origin-bottom-left skew-x-[-30deg] bg-white shadow-xl shadow-indigo-600/10 ring-1 ring-indigo-50 sm:mr-28 lg:mr-0 xl:mr-16 xl:origin-center"></div>\n  <div class="mx-auto max-w-2xl lg:max-w-4xl">\n    <img class="mx-auto h-12" src="https://tailwindui.com/img/logos/workcation-logo-indigo-600.svg" alt="">\n    <figure class="mt-10">\n      <blockquote class="text-center text-xl font-semibold leading-8 text-gray-900 sm:text-2xl sm:leading-9">\n        <p>“Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo expedita voluptas culpa sapiente alias molestiae. Numquam corrupti in laborum sed rerum et corporis.”</p>\n      </blockquote>\n      <figcaption class="mt-10">\n        <img class="mx-auto h-10 w-10 rounded-full" src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="">\n        <div class="mt-4 flex items-center justify-center space-x-3 text-base">\n          <div class="font-semibold text-gray-900">Judith Black</div>\n          <svg viewBox="0 0 2 2" width="3" height="3" aria-hidden="true" class="fill-gray-900">\n            <circle cx="1" cy="1" r="1" />\n          </svg>\n          <div class="text-gray-600">CEO of Workcation</div>\n        </div>\n      </figcaption>\n    </figure>\n  </div>\n</section>\n```\n\nAbre nuevamente el archivo de tus rutas`app-routes.ts` y agrega la nueva ruta de `blog`\n\n```typescript\nchildren: [\n      { path: \'home\', component: HomeComponent },\n      { path: \'blog\', component: BlogComponent },\n    ],\n```\n\n> 💡 Recuerda que cada ruta que agregues la debes importar en la parte superior de este mismo archivo.\n\n## 5.2  Crea la página contact\n\nEjecuta el comando:\n\n```\nng g c pages/contact\n```\nAbre el archivo `contact.component.html` y copia esto:\n\n```html\n <form [formGroup]="form" class="mx-auto mt-16 max-w-xl sm:mt-20">\n    <div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">\n      <div class="sm:col-span-2">\n        <label for="email" class="block text-sm font-semibold leading-6 text-white">Email</label>\n        <div class="mt-2.5">\n          <input  formControlName="email" type="email" name="email" id="email" autocomplete="email" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">\n        </div>\n      </div><div class="sm:col-span-2">\n        <label for="email" class="block text-sm font-semibold leading-6 text-white">Password</label>\n        <div class="mt-2.5">\n          <input formControlName="password"  type="email" name="email" id="password" autocomplete="email" class="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">\n        </div>\n      </div>\n    </div>\n    <div class="mt-10">\n      <button type="submit" (click)="submit()" [disabled]="!form.value" class="block w-full rounded-md bg-pink-500 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-pink-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Let\'s talk</button>\n    </div>\n  </form>\n```\n\nAbre nuevamente el archivo de tus rutas `app.routes.ts` y agrega la nueva ruta de `contact`\n\n```typescript\nchildren: [\n      { path: \'home\', component: HomeComponent },\n      { path: \'blog\', component: BlogComponent },\n      { path: \'contact\', component: ContactComponent },\n    ],\n```\n\nPara que nuestro formulario reactivo funcione debemos hacer algunos cambios en el archivo `contact.component.ts` \n\nCopia y pega lo siguiente:\n\n```typescript\n\nimport { Component } from \'@angular/core\';\nimport {FormControl, FormGroup, ReactiveFormsModule} from \'@angular/forms\'\n\n@Component({\n  selector: \'app-contact\',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule\n  ],\n  templateUrl: \'./contact.component.html\',\n  styleUrl: \'./contact.component.scss\'\n})\nexport class ContactComponent {\n\n  form = new FormGroup({\n\n    email: new FormControl(\'\'),\n    password: new FormControl(\'\'),\n  });\n  public submit() {\n\n    console.log(this.form.value);\n  }\n}\n```\n\n\n## 6. Redirigir la ruta raíz\n\nAbre el archivo `app.routes.ts` y agrega el siguiente objeto en el array de `Routes`\n\n```typescript\n{\n    path: \'\',\n    // If this path is the \'full\' match...\n    pathMatch: \'full\',\n    // ...redirect to this route.\n    redirectTo:\'home\',\n  },\n```\n\n## Que hacer a partir de aquí?\n\nComo se explica en la introducción, este es un punto de partida y debe ser sencillo mejorar esta app como te parezca\n\nTailwind es un framework de CSS poderoso y con muchas alternativas para colocar estilos a una app de forma rápida, después que aprendas a manejar su sintaxis podrás usarla a tu favor.\n\nTe dejo por [aquí]( https://tailwindui.com/) su página oficial para que explores un poco más.\n\n## Conclusión\n\nEn este tutorial has aprendido a crear una aplicación básica y utilizar tailwind para crear un diseño con encabezado(header) y pie de página(footer) la aplicación tiene varias páginas, así que esta es una oportunidad para que apliques carga perezosa(Lazy loading).\n\nPuedes guiarte por la nueva documentación de Angular V17 en la sección [Guías detalladas(In depth Guides)](https://angular.dev/guide/ngmodules/lazy-loading#verify-lazy-loading)\n\nSi tienes alguna pregunta no dudes en dejar un comentario en DEV o enviarme un mensaje al [X](https://twitter.com/derlys_paola)\n\nMuchas gracias a [Beeman](https://twitter.com/beeman_nl) por revisar este post.\n\nNos vemos en otro post ✋🏽\n\n\n\n\n\n\n\n\n',
  },
  {
    title: 'Tutorial 1: Formulario reactivo con Angular V17',
    createdAt: '2023-11-29T17:50:24.282Z',
    id: 'tutorial-1-formulario-reactivo-con-angular-v17-2889',
    content:
      '---\ntitle: Tutorial 1: Formulario reactivo con Angular V17\npublished: true\ndescription: Explora en cada artículo herramientas específicas para tareas particulares, desde desarrollo front-end, backend, frameworks y más. Brindándote las claves para que sigas avanzando en tu aprendizaje.\nseries: Caja de Herramientas del Desarrollador\ntags: angularv17, formulariosReactivos, beginner, español\ncover_image: "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50j277x778t5gjd6pjcc.png"\n# Use a ratio of 100:42 for best results.\n# createdAt: 2023-11-23 13:09 +0000\n---\n\n\n“¡Bienvenidos a nuestra ‘Caja de Herramientas del Desarrollador’! Esta serie de artículos es una exploración en el mundo del desarrollo de software, donde cada artículo es una herramienta de conocimiento que está diseñada para elevar tus habilidades de desarrollo al siguiente nivel.”\n\n## Requisitos\n\nPara este tutorial asegúrate de tener lo siguiente:\n\n- Una cuenta en la plataforma de [StackBlitz](https://stackblitz.com/), la puedes obtener de forma sencilla si tienes una cuenta en [GitHub](https://github.com/).\n\n\n> Si quieres que agreguemos a la caja de herramientas <b>como crear una cuenta en GitHub</b>, solo escribeme.😉\n\n### Paso # 1\n\n- Crea un proyecto en StackBlitz con Angular, al hacerlo se verá así:\n\n![Poyecto stackblitz](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e80xfgfw42htud6eglgz.png)\n\nEn el panel del lado izquierdo tendrás varios archivos que son básicamente los que el proyecto te da por defecto y que causan la renderización de lo que parece al lado derecho.\n\n ![Archivos generados](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viyijfc2j671p1sui2ls.png)\n\nPara que todo esto funcione, StackBlitz también tiene unas dependencias instaladas y son estas:\n\n![Dependencies](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6189ajzaw0gdzh033v5l.png)\n\n> Normalmente cuando creas un proyecto con Angular desde cero y no en un editor online estas dependencias ya viene en el  paquete de Angular que se llama [Angular CLI](https://angular.dev/tools/cli)\n\n### Paso # 2\n\nAbre el archivo `main.ts` y exploremos lo que contiene, sigue los colores de las áreas demarcadas en la imagen:\n\n![main](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vr1aezupandqnhnxk10.png)\n\n- En el área naranja tenemos las dependencias que necesitamos para que esto funcione. 🤗\n\n- En el área roja tenemos un decorador  `@Component` con su respectivo témplate que es en donde haremos unos cambios en el siguiente paso.\n\n> Si quieres saber mas sobre el decorador `@Component` y la anatomia de un componente te dejo este [enlace](https://angular.dev/guide/components) y me retiro lentamente 🤭 🤭 🤭\n\n- Por último, en el área azul tenemos una `clase`  que lo que hace es que da la lógica a nuestro código y nos deja hacer cosas como la interpolación que está en la línea 9\n\n### Paso # 3\n\n- Quédate en este archivo `main.ts` y comienza hacer los cambios en el template, es decir, de línea 9 a la 12.\n\n- Borra la línea 10, 11, y 12 de esa manera desaparecerá el link y solo te quedará la etiqueta `h1` con el título.\n\n- Copia y pega el siguiente código dentro del template:\n\n```html\n<form>\n  <div class="mb-3">\n    <label>Nombre</label>\n    <input/>\n    <label>Email</label>\n    <input/>\n    <button>Enviar</button>\n  </div>\n</form>\n```\n- Agrega una línea para importar el módulo que te permite usar todos los superpoderes de `Formularios reactivos`.\n\nDe esa manera te podrás importar módulos que utilizaremos en el siguiente paso.\n\n\n![Imports](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xz6rrs1bjt6tv1lsf5v.png)\n\n\n> Cada vez que necesites usar una herramienta de Angular que es parte de su Core debes importarlo en el archivo de tu componente. \n\n\n### Paso # 4\n\n- En la parte superior de tu código donde importaste `ReactiveForms` agrega `FormControl` de esa manera lo importaras.\n\n- Crea una nueva instancia en tu clase `App`.\n\n```TypeScript\nexport class App {\n  name = new FormControl(\'\');\n}\n```\nAhora puedes asociarlo con tú template, ¡Hazlo en el siguiente paso!\n\n### Paso # 5\n\nLas etiquetas de label e input necesitan ciertos atributos para usar el `Formcontrol`.\n\n- Copia y pega el siguiente código:\n\n```HTML\n<h1>Mi formulario reactivo con Angular!</h1>\n    <form>\n    <div class="mb-3">\n      <label for="name">Nombre</label>\n      <input id="name" type="text" placeholder="Escribe tu nombre" [formControl]="name"/>\n      <pre>{{name.value | json}}</pre>\n\n      <label for="email">Email</label>\n      <input id="email" type="text" placeholder="Escribe tu email" [formControl]="name"/>\n      <br>\n      <button>Enviar</button>\n    </div>\n    </form>\n```\n\n> La etiqueta `pre` nos permite visualizar que los valores ingresados en el input estan siendo registrados.\n\n### Paso # 6 \n\nAhora debemos asegurarnos que los valores que colocamos en los inputs se guarden en memoria.\n\n- Mediante el `button` guardaremos la información del formulario y lo hacemos así:\n\n - Convierte tu formulario en un grupo con la propiedad `formGroup`\n\n\n- Copia y pega este código en la `clase`:\n\n```TypeScript\nexport class App {\n  form = new FormGroup({\n    name: new FormControl(\'\'),\n    email: new FormControl(\'\'),\n  });\n```\n\nPara que estas propiedades funcionen debes hacer algunos cambios en tu `HTML` de esa manera lo enlazas.\n\n- Copia y pega este código en tú template:\n\n```HTML\n<h1>Mi formulario reactivo con Angular!</h1>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" >\n    <div class="mb-3">\n      <label for="name">Name</label>\n      <input id="name" type="text" placeholder="Escribe tu nombre" formControlName="name"/>\n      <br>\n      <label for="email">Email</label>\n      <input id="email" type="email" placeholder="Escribe tu email" formControlName="email"/>\n      <br>\n      <button >Enviar</button>\n    </div>\n    </form>\n```\n\n>> Como te puedes dar cuenta las etiquetas tienen muchos atributos que se usan para que tu logica funcione y de esa manera puedas o renderizar(mostrar) lo que quieres y que los metodos cumplan la funcion para lo que fueron creados. [¡Animate a conocer un poco mas de las etiuietas en HTML!](https://developer.mozilla.org/en-US/docs/Glossary/HTML5)\n\n### Paso # 7 \n\n- Ahora crea la lógica del botón mediante un método en la clase, copia y pega este código:\n\n```Typescript\n\nonSubmit() {\n    console.warn(this.form.value);\n  }\n```\n\n> El console nos permite ver un mensaje de advertencia que nos muestra los datos de los inputs ingresados por los usuarios.\n\n- Como te diste cuenta en tu código `HTML` anterior, la etiqueta `form` no solo tiene el atributo `[formGroup]="form"` también tiene la llamada a nuestro método `(ngSubmit)="onSubmit()`, sí justo el que acabaste de generar anteriormente.\n\nY con esto lo único que nos falta es hacer es ver nuestros datos renderizados. Quedaría algo así:\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40pv5sjvgym24liprtz.png)\n\n💪🏽 Waoo se ve genial verdad, capturaste los datos.\n\nLo que dire para finalizar este tutorial es que aprendimos bastantes conceptos así no lo parezca y que te puedes estar haciendo preguntas como:\n\n1- Que tal si el usuario escribe algo diferente en el campo email.\n>> Como nos aseguramos que escriba lo que deberia ir en ese campo.\n\n2- Y si el usuario quiere volver a llenar el formulario y está lleno con los datos que escribió anteriormente.\n\nSí, estás totalmente en lo cierto, eso también lo podemos programar. Eso y muchas cosas más 🚀.\n\nQuédate pendiente de mis futuros artículos que hacen parte de esta serie 🗃️ > Caja de Herramientas del Desarrollador.\n\nLes dejo por aquí el [código en la plataforma de StackBlitz](https://stackblitz.com/edit/stackblitz-starters-s61kff?file=src%2Fmain.ts) y él [repositorio](https://github.com/Derlys/tutorial-1-reactive-form/tree/main) si quieren mirarlo 👀 para guiarse.\n\n\n\n\n\n  \n\n',
  },
  {
    title: 'Usando Dev.to para escribir mis posts',
    createdAt: '2023-11-23T13:31:34.611Z',
    id: 'usando-devto-para-escribir-mis-post-55lp',
    content:
      '---\ntitle: Usando Dev.to para escribir mis posts\npublished: true\ndescription: Mi experiencia escribiendo posts en la plataforma de dev.to \nseries: "Formas y plataformas para escribir tu blog"\ncover_image: "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdak77i16j7zruogz9jx.png"\n// canonical_url: ""\ntags: communities,blogs, beginner, español\n---\n\n\nEmpiezo por contarles que he utilizado dev.to por mucho tiempo y que él objetivó de este post es que utilices esta información para tener una alternativa y elegirla para escribir tus posts si cumple con los requisitos que buscas.\n\n> Una de las desiciones a tomar cuando compartes contenido y  tienes un blog es: ¿ Que plataformas utilizo para publicarlo?\n\nCuando yo me hago esta pregunta se me viene a la mente que esa herramienta que elija debe tener los siguientes requisitos:\n\n- Debe ser gratuita como primera opción\n- Que me permita editar los posts de manera sencilla\n- Que me permita agrupar varios posts\n- Que la plataforma esté enfocada en temas tecnológicos (este caso no aplica a todos) \n\nHabiendo dicho esto les contaré como utilizo esta plataforma y los beneficios que me aporta.\n\n1- Dev.to fue una de las primeras plataformas que use y que cumple con la mayoría de los requisitos que busco.\n\nLa mayoría de los post que he escrito son tutoriales en donde explico el paso a paso de un concepto o funcionalidad que estoy aprendiendo en un momento dado.\n\n2- Esta plataforma está enfocada en su mayoría en temáticas de tecnología, desarrollo de software, desarrollo web, lenguajes de programación, entre otros, y es por eso que es más probable que una persona que esté buscando la respuesta a un tema específico en esta área la encuentre aquí y en uno de mis post 😁.\n\n3- Su estructura me permite editar todo en Markdown que es un lenguaje de marcado en donde le puedes dar estructura y orden a tu post.\n\n4- Por lo mencionado en el anterior punto me es muy sencillo hacer cambios en mis post cada vez que lo necesite y esto es  una ventaja para mí.\n\n5- si quieres hacer una serie de posts que abarquen un mismo tema, también tienes esta opción con la plataforma, se llama “series”. Aquí te dejo un [ejemplo](https://dev.to/derlys/series/7746).\n\nHasta ahora para mí DEV.to es mi aliado al momento de publicar mis posts.\n\nSi quieres tener una landing page o un blog un poco más con tu diseño, colores y otras secciones en mi próximo post hablaremos del tema.\n\nGracias por leerme. 🙏\n\n\n\n\n\n',
  },
  {
    title: 'Agregando autenticación a tu app',
    createdAt: '2020-10-24T17:31:37.538Z',
    id: 'agregando-autenticacion-a-tu-app-5aka',
    content:
      "---\ntitle: \"Agregando autenticación a tu app\"\ndescription: \"En este tutorial implementaremos la autenticación de nuestra app, con la posibilidad de\ningresar a ella con diferentes medios como: google,redes sociales etc.\npublished: true\nseries: \"Agregando funcionalidad a tu app\"\ncover_image: \"\"\ncanonical_url: \"\"\ntags: angular, kikstart, beginner, espanol\n---\n \n## Requisitos\n\nAsegurate de tener una app básica creada, similar a la que hicimos en la serie # 1 [Introducción a Kikstart UI](https://dev.to/derlys/series/7746).\n\n## Paso # 1\nEn primer lugar generamos los componentes y el módulo que los contendrá. \n\n\n \n1: Crea una carpeta llamada `auth` y genera los componentes register, login y logout.\n\n```bash\nng g module auth/register --route register --module app\n```\n\n```bash\nng g module auth/login --route login --module app\n```\n\n```bash\nng g module auth/logout --route logout --module app\n```\n## Paso # 2\nRenderizamos las rutas de los componentes creados.\n\n1: Abre el archivo `app.component.ts` y agrega los labels dentro del array de links asi:\n\n```typescript\n{ label: 'Register', path: '/register'},\n{ label: 'Login', path: '/login' },\n{ label: 'Logout', path: '/logout'},\n```\n\n## Paso # 3\nCreamos el servicio,lo configuramos para que esté listo y utilizarlos en nuestro componente `login`.\n\n1:Crea el servicio ejecutando el comando\n\n```bash\n ng g service auth/auth\n```\n2:Añade las dependencias necesarias para utilizar las funcionalidades de `firebase`. Utiliza los siguientes comandos:\n\n```bash\nnpm i @angular/fire\nnpm install @angular/fire firebase --save\n```\n3:Abre el archivo `auth.service.ts` y agrega lo siguiente en la parte superior:\n \n```typescript\nimport * as firebase from 'firebase';\n```\n\n4:En el mismo archivo `auth.service.ts` agrega lo siguiente en la clase `AuthService`:\n\n```typescript\nexport class AuthService {\n  user: firebase.User;\n  isLoggedIn: boolean;\n```\n5:Luego en el mismo archivo agrega lo siguiente en la parte superior:\n\n```typescript\nimport { AngularFireAuth } from '@angular/fire/auth';\n```\n6:Cuando hayamos importado `AngularFireAuth` podemos inyectar su funcionalidad en el constructor:\n\n```typescript\n constructor(private readonly afa: AngularFireAuth) {\n    this.afa.authState.subscribe((res) => {\n      console.log(res);\n      this.user = res;\n      this.isLoggedIn = !!this.user;\n    });\n  }\n}\n```\n7:Importa el modulo para utilizar `observables` asi:\n\n```typescript\nimport { from, Observable, ObservedValueOf } from 'rxjs';\n```\n\n> 💡Nota\n>\nSi te aparece inactiva la línea que acabas de colocar en el punto 6 , no te preocupes , apenas estamos construyendo la lógica y no hemos usado Observables, vamos con calma 😉.\n\n8:Como último punto en este paso en el archivo `auth.service.ts` agrega lo siguiente después del constructor:\n\n```typescript\nlogin(\n    email: string,\n    password: string\n  ): Observable<ObservedValueOf<Promise<firebase.auth.UserCredential>>> {\n    return from(this.afa.signInWithEmailAndPassword(email, password));\n  }\n\n  register(\n    email: string,\n    password: string\n  ): Observable<ObservedValueOf<Promise<firebase.auth.UserCredential>>> {\n    return from(this.afa.createUserWithEmailAndPassword(email, password));\n  }\n\n  loginGoogle(): Observable<\n    ObservedValueOf<Promise<firebase.auth.UserCredential>>\n  > {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    return from(this.afa.signInWithPopup(provider));\n  }\n\n  logout(): Observable<ObservedValueOf<Promise<void>>> {\n    return from(this.afa.signOut());\n  }\n}\n```\n\n## Paso # 4\nAhora crearemos las funciones para cada una de las formas de autenticación y luego las configuraremos.\n\n> 💡Recuerda \n>\nEn el paso anterior implementamos varias formas de autenticación cuando quieras puedes hacer uso de estos servicios solo debes configurarlo en tu componente como lo hacemos en el punto # 3 de este paso.\n\n1: Abre el archivo`login.component.ts` y  agrega lo siguiente en la parte superior:\n\n```typescript\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n```\n2:Inyecta e inicializa la forma de autenticación que usarás. En este caso usaras `loginGoogle`.\n\n```typescript\nprivate router: Router, private service: AuthService\n```\n3: En el mismo archivo `login.component.ts` agrega la siguiente función:\n\n```Typescript\nloginGoogle(): void {\n    this.service.loginGoogle().subscribe((res) => {\n      console.log(res);\n      return this.router.navigate(['/']);\n    });\n  }\n```\n\n## paso # 5\nAquí configuraremos el proyecto que creamos en firebase a nuestra app.\n\n1:Busca en la terminal tu proyecto y ejecuta el siguiente comando:\n\n```bash\nng add @angular/fire\n```\n> 💡 KikstartTip\n>\nSi es la primera vez que instalas @angular/fire en tu computador te hará preguntas como esta:\n`Allow Firebase to collect CLI usage and error reporting information? (Y/n)`.\n\n2: Durante el proceso de instalación sobre el proyecto elige el que quieres desplegar.\n\n```\nInstalling packages for tooling via npm.\nInstalled packages for tooling via npm.\nUPDATE package.json (1516 bytes)\n✔ Packages installed successfully.\n✔ Preparing the list of your Firebase projects\n? Please select a project: (Use arrow keys or type to search)\n❯ site2 (site2-8ce5b)\n```\n3:Configura el enviroment con las llaves de tus proyectos en `firebase`.\n\n4:En la consola de `firebase` busca tu proyecto.\n\n5:En descripción general haz clic en configuración del proyecto. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/cv69v4i3s537sv0jrgdp.png)\n\n3: Busca el siguiente título:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/jx0vtqr6e2u6mi3xscnm.png)\n\n4: Busca la ruta `src/enviroments/enviroment.ts` y coloca esta secuencia de comandos con sus respectivas llaves:\n\n```bash\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: '',\n    authDomain: '',\n    databaseURL: '',\n    projectId: '',\n    storageBucket: '',\n    messagingSenderId: '',\n    appId: '',\n    measurementId: '',\n  },\n};\n```\n5: En tu archivo `app.module.ts` importa las funcionalidades de la autenticación de `firebase` para utilizarlas en el siguiente paso.\n\nAgrega las siguientes líneas en la parte superior:\n\n````typescript\nimport { AngularFireModule } from '@angular/fire';\nimport { environment } from '../environments/environment';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\n```\n6: En el import del mismo archivo agrega esto:\n\n```typescript\nAngularFireModule.initializeApp(environment.firebase),\nAngularFireAuthModule\n```\n\n## paso # 6\nLlegó el momento de los templetes, que se haga la luz y renderizamos la lógica que hemos creado.\n\n1: En el archivo `login.component.html` crea el templete para renderizar un formulario y un botón con ayuda de `\u001dKikstart UI`.\n\n```html\n<!-- This flex container takes the full height and vertically centers the content -->\n<div class=\"d-flex flex-column h-100 justify-content-center\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <!-- This is a single column that is responsive -->\n      <div class=\"col-12 col-md-6 offset-md-3\">\n        <div class=\"card\">\n          <div class=\"card-header\">Login</div>\n          <div class=\"card-body\">\n            <!-- The formGroup 'form' is defined in the component class -->\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"d-flex justify-content-between\">\n              <a routerLink=\"/\" class=\"ml-2 btn btn-outline-secondary\">\n                Home\n              </a>\n              <!-- The button has a click handler, it will be disabled if the form is not valid -->\n              <button\n                (click)=\"loginGoogle()\"\n                type=\"submit\"\n                class=\"btn btn-outline-success\"\n              >\n                Log in\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n2: Ve a la tu proyecto de firebase y busca la pestaña autenticación, en el botón añadir usuario ingresa un correo y una contraseña para autorizar el login.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/n97w8kiltncxc9lwb4q4.png)\n\nAhora en la consola del navegador tu puedes ver que ya tenemos un usuario que utiliza este servicio.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/d58c47zncdusvmh2g19w.png)\n\nSin embargo como nos damos cuenta en nuestra app que esto pasó, hagamos el siguiente paso.\n\n## paso # 7\nCreamos la lógica del logout y agregamos el código del templete para saber cuando estamos logueados o no.\n\n1:Abre el archivo`logout.component.ts` y  agrega lo siguiente en la parte superior:\n\n```typescript\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n```\n2:Inyecta e inicializa el servicio del `logout` en el constructor.\n\n```typescript\nconstructor(private router: Router, private service: AuthService) {}\n```\n3: En el mismo archivo `logout.component.ts` agrega la siguiente función:\n\n```Typescript\nlogout(): void {\n    this.service.logout().subscribe((res) => {\n      return this.router.navigate(['/']);\n    });\n  }\n```\n4:En el archivo `logout.component.html`agrega las siguientes líneas:\n\n```typescript\n<button (click)=\"logout()\" class=\"btn btn-secondary mr-1\">\n  logout\n</button>\n```\nAsi dando click en el botón `logout` puedes notar que cuando ingresar al login nuevamente te solicitara tu correo.\n\n\n## Resumen\nHemos agregado 3 nuevos componentes `login`, `register` y `logout`, también hemos configurado estos 3 componentes para darle autenticación a nuestra app.\n\nPuedes encontrar el repositorio con los pasos [aquí](https://github.com/Derlys/Tutorial-auth).\n\n\n\n\n",
  },
  {
    title: 'Aplicando lazy loading a tu app',
    createdAt: '2020-08-04T17:51:58.102Z',
    id: 'aplicando-lazy-loading-a-tu-app-j5c',
    content:
      "---\ntitle: \"Aplicando lazy loading a tu app\"\ndescription: \"En primer lugar generamos los componentes y módulos que necesitamos para agregar páginas a nuestra app.\"\npublished: true\ncover_image: \"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50j277x778t5gjd6pjcc.png\"\ncanonical_url: \"\"\ntags: angular, kikstart, beginner, espanol\n---\n\n## Requisitos\nHaber hecho tu app básica, puedes tomar el ejemplo del [tutorial # 1](https://dev.to/kikstartdev/tutorial-1-instalando-angular-cli-40ed) de la serie \"Introducción a Kikstart UI\"\n\n\n> 💡Tip \n> \n> La manera en que generamos el siguiente componente\n es mucho más eficiente ya que crea el componente con su \n respectiva ruta y módulo.\n\n\n## Paso # 1\nCreamos el componente `posts` con su módulo y rutas.\n\n1: Ejecuta el siguiente comando:\n\n```bash\nng g module posts --route posts --module app\n```\n## Paso # 2\nConfiguramos nuestra app para utilizar las colecciones del  proyecto en `firebase`.\n\n\n> 💡Recuerda\n> \n> Antes de hacer este paso debiste haber instalado`ng add @angular/fire` y configurar tu environment, como en el [tutorial # 4 de la serie 1](https://dev.to/kikstartdev/tutorial-4-desplegar-una-app-de-angular-cli-a-firebase-3aij).\n\n\n1: Busca la ruta`src/app.module.ts` y escribe lo siguiente en la parte superior:\n\n```typescript\nimport {AngularFireModule} from \"@angular/fire\";\nimport {environment} from \"../environments/environment\";\nimport {AngularFirestoreModule} from \"@angular/fire/firestore\";\n```\n\n2: Luego en el mismo archivo en el array de `imports`coloca lo siguiente:\n\n```typescript\n AngularFireModule.initializeApp(environment.firebase),\n AngularFirestoreModule\n```\n\n## Paso # 3\nMostrar la ruta\n\n1: Busca la ruta `src/app/app.component.ts`en el array de link agrega un label más.\n\n```typescript\n links: UiLink[] = [\n    { label: 'Home', path: '/' },\n    { label: 'About', path: '/about' },\n    { label: 'Contact', path: '/contact' },\n    { label: 'Blog', path: '/posts' },\n  ];\n}\n```\n\n## Paso # 4\nCreamos el servicio y lo usamos en nuestro componente.\n\n1: Ejecuta el siguiente comando:\n\n```bash\n ng g service posts/posts --skip-tests\n```\n2: Configura el servicio en el archivo `posts.service.ts` y agrega lo siguiente en la parte superior:\n\n```typescript\nimport { Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { collectionData, docData, fromCollectionRef } from 'rxfire/firestore';\n```\n\n\n> 💡Recuerda\n> \n> Para cada paquete de `firebase` que utilices debes instalarlo en este caso usamos [rxfire](https://www.npmjs.com/package/rxfire) entonces lo instalamos.\n\n\n3: Luego en el mismo archivo en la clase coloca lo siguiente:\n\n```typescript\nexport class PostsService {\n  blogs: Observable<any[]>;\n  collectionRef: any;\n\n  constructor(private firestore: AngularFirestore) {\n    this.collectionRef = this.firestore.collection('courses');\n    this.blogs = collectionData(this.collectionRef.ref, 'id');\n  }\n}\n```\n\n## Paso # 5\nHacemos la lógica para usar nuestro servicio.\n\n1: Busca la ruta `src/app/posts.component.ts` coloca lo siguiente en la parte superior:\n\n```typescript\nimport { PostsService } from './posts.service';\nimport { Observable } from 'rxjs';\n```\n\n2:Luego en el mismo archivo en la clase coloca lo siguiente:\n\n```typescript\nexport class PostsComponent implements OnInit {\n  courses$: Observable<any>;\n\n  constructor(public service: PostsService) {\n    this.courses$ = this.service.blogs;\n  }\n\n  ngOnInit(): void {}\n}\n```\n## Paso # 6\nFinalmente renderizamos los datos en nuestro componente\n\n1: Busca la ruta `src/app/posts/posts.component.html` y pega lo siguiente:\n\n```html\n  <div *ngIf=\"courses$ | async as posts\">\n  <div *ngFor=\"let post of posts\">\n    <img src=\"{{ post.author_img }}\" />\n    <a [routerLink]=\"['/posts', post.id]\">\n      <h2>{{ post.title }}</h2>\n    </a>\n\n    <h3>{{ post.description }}</h3>\n\n    <h4>{{ post.author_name }}</h4>\n  </div>\n</div>\n```\n\n## Resumen\nGeneramos un componente `post` con su módulo y ruta,creamos su servicio y lo usamos en el templete.\n\nGracias por seguir este tutorial, si tienes algun comentario hazlo a través de mi [twitter](https://twitter.com/derlys_paola) y con gusto te contestare.\n\n\n\n\n\n\n\n\n",
  },
  {
    title: 'Tutorial: Aplicaciones de Angular CLI con bootstrap',
    createdAt: '2020-07-28T01:52:20.049Z',
    id: 'tutorial-aplicaciones-de-angular-cli-con-bootstrap-pfb',
    content:
      '---\ntitle: "Tutorial: Aplicaciones de Angular CLI con bootstrap"\ndescription: "En este tutorial, tu aprendes cómo usar estilos en Apps de Angular CLI."\npublished: true\ncover_image: ""\ncanonical_url: ""\ntags: angular, kikstart, beginner, espanol\n---\n\n![Example of the pages of the final app](https://dev-to-uploads.s3.amazonaws.com/i/uisbw2k5xdupr3lrtipy.gif)\n\nEn este tutorial, tu aprendes cómo usar estilos en Apps de Angular CLI.\n\nLa meta es construir un layout en una aplicación con un header y un footer, una página home, página about y una página login con formulario.\n\nMira el [demo en vivo aquí](https://tutorial-styling-angular-cli-apps-with-bootstrap.netlify.app/home) o el [repositorio de Github](https://github.com/beeman/tutorial-styling-angular-cli-apps-with-bootstrap).\n\n## Requisitos\n\nAsegurate que tienes la siguientes herramientas instaladas:\n\n- Node.js y NPM, visita su [pagina web](https://nodejs.org/en/) para las instrucciones de instalación.\n  - Ejecuta `node -v` para verificar que tienes versión 12 o más.\n  - Ejecuta `npm -v` para verificar que tienes la versión 6 o más.\n- Angular CLI ( `npm install -g @angular/cli@latest`  para instalar).\n  - Ejecuta `ng --version`  para verificar que tienes versión 10 o más.\n\nSi prefieres usar `yarn`, primero [configura el package manager de Angular CLI ](https://beeman.dev/posts/using-yarn-with-angular-cli-1n73/). Esto asegura que la aplicación esta creado con un archivo `yarn.lock` en vez de un `package-lock.json`.\n\n## 1. Crea una nueva aplicación \n\nAbre un terminal y ejecuta el siguiente comando:\n\n```bash\nng new sandbox --routing --style scss --strict\n```\n\nEl comando  `ng new` genera una aplicación Angular básica en un directorio llamado `sandbox` e instala sus dependencias.\n\nEl  `--routing`  le indica a Angular CLI  que se genere un módulo de rutas.\nEl `--style scss` indica que usamos SCSS para los estilos.\nEl `--strict` configura la aplicación para ejecutarse en [modo estricto](https://angular.io/guide/strict-mode).\n\nAl final de la instalación del app, el Angular CLI también inicializa un repositorio de git y hace un commit inicial.\n\n## 2. Inicia la aplicación en modo de desarrollo\n\nDespués de haber finalizado la instalación, ejecuta el siguiente comando para navegar al `directorio del proyecto`.\n\n```bash\ncd sandbox\n```\n\nEn el directorio del proyecto, puedes iniciar el servidor de desarrollo usando `ng serve`:\n\n```bash\nng serve\n```\n\n> ** Angular Live Development Server is listening on localhost:4200, open your browser on (http://localhost:4200/) **\n\nNavega al link mencionado antes por el servidor de desarrollo  y verifica que esté funcionando. El app está lista para tener algunos estilos!  😎\n\n## 3. Instala Bootstrap\n\nEjecuta el siguiente comando en el directorio de tu proyecto para instalar Bootstrap:\n\n```bash\nnpm install bootstrap\n```\n\nCuando la instalación finaliza podemos decirle a Angular CLI que use estos estilos.\n\nAbre `src/styles.scss` y agrega las siguientes líneas:\n\n```scss\n@import \'~bootstrap/scss/bootstrap\';\n// Set the full page height so we can stick the footer to the bottom\nhtml,\nbody {\n  height: 100%;\n}\n```\n\nDespués abre `src/app/app.component.html` y borra todo el contenido,reemplazalo con lo siguiente:\n\n```html\n<h1 class="text-center text-primary">Hello Bootstrap!</h1>\n```\n\nCuando regreses a tu navegador, deberías ver `Hello Bootstrap` en letras azules grandes 👏🎊.\n\n¡Podemos hacer que nuestra aplicación se vea mejor!\n\n## 4. Configura el layout de la aplicación\n\n![The basic application layout](https://dev-to-uploads.s3.amazonaws.com/i/890nao89aq581a8xiles.png)\n\nEn este paso creamos un `UiModule` y le agregamos 3 componentes:\n\n` LayoutComponent`, `HeaderComponent`, y `FooterComponent`.\n\n> 💡Es una buena idea mantener el UI separado del resto de la app. Esta separación de responsabilidades también te  permite fácilmente reutilizar el UI en otros proyectos.\n\n## 4.1 Crea el UiModule\n\nEjecuta el siguiente comando para generar el `UiModule`.\n\n```bash\nng generate module ui --module app\n```\n\nDespues, genera los 3 componentes dentro de este nuevo módulo:\n\n```bash\nng generate component ui/layout\nng generate component ui/header\nng generate component ui/footer\n```\n\n> 💡 El comando `ng generate` admite un acceso directo: Usa `ng g c` para generar un componente, `ng g m` para generar un módulo, etc.\n\n## 4.2 Implementa Layout Component\n\nAbre `src/app/ui/layout/layout.component.html` y reemplaza el contenido con el siguiente pedazo de código:\n\n```html\n<!-- This flex container takes the full height -->\n<div class="d-flex flex-column h-100">\n  <app-header></app-header>\n  <!-- The main area does not shrink, \'pushing down\' the footer -->\n  <main class="flex-shrink-0">\n    <!-- This will render the routes -->\n    <router-outlet></router-outlet>\n  </main>\n  <!-- This keeps the footer down if the main content does not fill up the space -->\n  <footer class="mt-auto">\n    <app-footer></app-footer>\n  </footer>\n</div>\n```\n\nPodemos usar este `LayoutComponent` en la ruta, y renderizar los `children` en la ubicación de `router-outlet`. \n\nAntes de seguir, asegurate de importar `RouterModule` en `UiModule`.\n\nAbre `src/app/ui/ui.module.ts` y agrega el siguiente código después de los otros imports:\n\n```typescript\nimport { RouterModule } from \'@angular/router\';\n```\n\nAgrega `RouterModule` a el array de imports:\n\n```typescript\n@NgModule({\n  declarations: [LayoutComponent, HeaderComponent, FooterComponent],\n  imports: [CommonModule, RouterModule],\n})\n```\n\n> 💡Si olvidas el import de `RouterModule`, el servidor te dira:\n\n    ERROR in src/app/ui/layout/layout.component.html:3:3 - error NG8001: \'router-outlet\' is not a known element:\n      1.  If \'router-outlet\' is an Angular component, then verify that it is part of this module.\n      2.  If \'router-outlet\' is a Web Component then add \'CUSTOM_ELEMENTS_SCHEMA\' to the \'@NgModule.schemas\' of this component to suppress this message.</pre>\n\n## 4.3 Usa el LayoutComponent\n\nAbre `src/app/app-routing.module.ts` y reemplaza la linea `const routes: Routes = []` con lo siguiente:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \'\',\n    component: LayoutComponent,\n    children: [\n      // Here we will add our application pages\n    ],\n  },\n];\n```\n\nAsegurate de importar `LayoutComponent` en `src/app/app-routing.module.ts`:\n\n```typescript\nimport { LayoutComponent } from \'./ui/layout/layout.component\';\n```\n\nAbre `src/app/app.component.html` y reemplaza el contenido con la siguiente línea: \n\n```html\n<router-outlet></router-outlet>\n```\n\nGuarda todos los archivos y revisa en tu navegador, deberías ver el  `HeaderComponent` y `FooterComponent` renderizados. Hora de decorarlas!\n\n## 4.4 Implementa el Header\n\nAbre `src/app/ui/header/header.component.html` y reemplaza el contenido con lo siguiente:\n\n```html\n<!-- You can change the values `dark` here with any of the following: -->\n<!-- dark, light, primary, secondary, success, info, danger, warning -->\n<nav class="navbar navbar-dark bg-dark">\n  <!-- This is the application title with a link to the root -->\n  <a class="navbar-brand" routerLinkActive="active" routerLink="/">Angular & Bootstrap</a>\n  <!-- This is a spacer so the links move to the end -->\n  <div class="mr-auto"></div>\n  <!-- This main navigation links are defined here -->\n  <div class="navbar-expand">\n    <div class="navbar-nav">\n      <!-- Each link has the routerLink property set to a different route -->\n      <a class="nav-item nav-link" routerLinkActive="active" routerLink="/home">Home</a>\n      <a class="nav-item nav-link" routerLinkActive="active" routerLink="/about">About</a>\n      <a class="nav-item nav-link" routerLinkActive="active" routerLink="/login">Login</a>\n    </div>\n  </div>\n</nav>\n```\n\nRefiere a la [documentación de navbar en bootstrap] (https://getbootstrap.com/docs/4.5/components/navbar/) para mas detalles de la sintaxis del navbar y como hacerlos responsivo.\n\n## 4.5 Implementa el Footer\n\nAbre `src/app/ui/footer/footer.component.html` y reemplaza el contenido con esto:\n\n```html\n<div class="py-3 bg-dark text-center text-muted">\n  <small>Copyright &copy; 2020</small>\n</div>\n```\n\n## 5. Agregar páginas de aplicación\n\nCuando el layout de la aplicación esté en su lugar, es el momento de agregar unas páginas.\n\nEl comando que usamos crea un módulo con un componente y usa [lazy-loading](https://angular.io/guide/lazy-loading-ngmodules) para registrarlo en el `AppModule`.\n\n> 💡Lazy loading es recomendado como una manera de enrutar en una app de Angular, ya que se asegura que los usuarios no descarguen código que no se usará.\n\n## 5.1 Crea una pagina Home\n\nEjecuta el siguiente comando para generar el `HomeModule`:\n\n```bash\nng g module pages/home --route home --module app\n```\n\nAbre `src/app/pages/home/home.component.html` y reemplaza el contenido con esto:\n\n```html\n<div class="container py-5">\n  <div class="jumbotron">\n    <h1 class="text-secondary">Home</h1>\n  </div>\n</div>\n```\n\nVe a la aplicación en el navegador y haz clic en el enlace `Home` en el header.\n\nTe llevará a la ruta `/home` con el texto \'Home\'. Sin embargo, el layout con el header y el footer se ha ido!\n\nPara arreglar esto, abre `src/app/app-routing.module.ts` y mueve la ruta creada recientemente dentro del array `children`.\n\n ```typescript\nconst routes: Routes = [\n  {\n    path: \'\',\n    component: LayoutComponent,\n    children: [\n      // Here we will add our application pages\n      {\n        path: \'home\',\n        loadChildren: () => import(\'./pages/home/home.module\').then(m => m.HomeModule),\n      },\n    ],\n  },\n];\n ```\n\nDespués de guardar este archivo, la pagina deberia renderizarse apropiadamente.\n\n## 5.2  Crea la pagina About\n\nEjecuta el siguiente comando para generar el `AboutComponent`:\n\n```bash\nng g module pages/about --route about --module app\n```\n\nAbre `src/app/pages/about/about.component.html` y reemplaza el contenido con esto:\n\n```html\n<div class="container py-5">\n  <div class="jumbotron">\n    <h1 class="text-secondary">About</h1>\n  </div>\n</div>\n```\n\nAbre `src/app/app-routing.module.ts` y mueve la ruta de about dentro del array `children` para que se encuentre al lado de la ruta de `HomeModule`.\n\n## 5.3 Crea la pagina Login \n\nLa página de login es un poco más compleja porque tiene un formulario y usa el router para redirigir el usuario.\n\nEjecuta el siguiente comando para generar el `LoginModule`:\n\n```bash\nng g module pages/login --route login --module app\n```\n\nAbre `src/app/pages/login/login.component.ts` y agrega el siguiente codigo despues de los otros imports:\n\n```typescript\nimport { FormControl, FormGroup } from \'@angular/forms\';\nimport { Router } from \'@angular/router\';\n```\n\nCambia el contenido del cuerpo de la clase `LoginComponent` con esto:\n\n```typescript\nexport class LoginComponent implements OnInit {\n  // The form group defines the fields used in the form\n  form = new FormGroup({\n    email: new FormControl(\'\'),\n    password: new FormControl(\'\'),\n  });\n\n  // Inject the router so we can navigate after a successful login\n  constructor(private readonly router: Router) {}\n\n  ngOnInit(): void {}\n\n  public submit() {\n    // Use the form value to do authentication\n    console.log(this.form.value);\n    // Navigate after successful login\n    return this.router.navigate([\'/\']);\n  }\n}\n```\n\nAbre `src/app/pages/login/login.component.html` y reemplaza el contenido con lo siguiente:\n\n```html\n<!-- This flex container takes the full height and vertically centers the content -->\n<div class="d-flex flex-column h-100 justify-content-center">\n  <div class="container">\n    <div class="row">\n      <!-- This is a single column that is responsive -->\n      <div class="col-12 col-md-6 offset-md-3">\n        <div class="card">\n          <div class="card-header">Login</div>\n          <div class="card-body">\n            <!-- The formGroup \'form\' is defined in the component class -->\n            <form [formGroup]="form">\n              <div class="form-group">\n                <label for="email">Email address</label>\n                <!-- The formControlName defines the name of the field in the formGroup -->\n                <input id="email" formControlName="email" type="email" required class="form-control" />\n              </div>\n              <div class="form-group">\n                <label for="password">Password</label>\n                <input id="password" formControlName="password" type="password" required class="form-control" />\n              </div>\n            </form>\n          </div>\n          <div class="card-footer">\n            <div class="d-flex justify-content-between">\n              <a routerLink="/" class="ml-2 btn btn-outline-secondary">\n                Home\n              </a>\n              <!-- The button has a click handler, it will be disabled if the form is not valid -->\n              <button (click)="submit()" [disabled]="!form.valid" type="submit" class="btn btn-outline-success">\n                Log in\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n> 💡 El template del `LoginComponent` es bastante largo. Cuando agregues más páginas de autenticación, considera crear un `AuthLayoutComponent` separado y  usalo como `LayoutComponent`, luego agrega `LoginComponent`, `RegisterComponent` etc, como elementos secundarios de  `AuthLayoutComponent`.\n\nVe a tu aplicación en el navegador y da clic al enlace `Login` en el header.\n\nLa página de login renderiza el formulario en el centro de la pantalla y no necesitamos agregar la ruta en el array de `children`.\n\nHay una última cosa por arreglar. Si haces clic en el enlace `Home`, volverá a la raíz de la aplicación que está en blanco.\n\n¿ No sería genial si pudiéramos ir a la página de inicio 😱?\n\n## 5.4  Redirigir la ruta inicial \n\nAbre `src/app/app-routing.module.ts` y agregar el siguiente objeto en la parte superior del array de rutas:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \'\',\n    // If this path is the \'full\' match...\n    pathMatch: \'full\',\n    // ...redirect to this route.\n    redirectTo: \'home\',\n  },\n  // The other routes go here\n];\n```\n\n## ¿A dónde ir desde aquí?\n\nComo se indicó en la introducción, esta aplicación es un punto de partida y debería ser bastante sencilla para mejorarla a tu gusto.\n\n### Librerías adicionales\n\nUsa [ng-bootstrap](https://ng-bootstrap.github.io/#/home) o [ngx-bootstrap](https://valor-software.com/ngx-bootstrap/#/) si deseas usar implementaciones de los componentes de bootstrap, como menús desplegables, pestañas, colapsar, etc. Ambas librerías son excelentes opciones, elija la que más le guste.\n\nSi tus aplicaciones tienen muchos formularios, usa [formly](https://formly.dev/) para una forma declarativa de definir sus formularios, sin escribir ninguna de las plantillas de formulario.\n\n### Temas y colores\n\nPara ajustar la apariencia de Bootstrap, abre `src/styles.scss` y configura las variables. Asegúrate de definir las variables antes de importar Bootstrap:\n\n```bash\n$dark: hotpink;\n$jumbotron-bg: #333;\n$secondary: limegreen;\n$body-bg: #555;\n@import \'~bootstrap/scss/bootstrap\';\n```\n\nOtra opción genial es [Bootswatch](https://bootswatch.com/), que ofrece más de 20 diseños diferentes basados en bootstrap.\n\n## Conclusión\n\nEn este tutorial, tu aprendiste cómo crear una aplicación básica de Angular y usaste bootstrap para crear un layout con header y footer.\n\nLa app tiene varias páginas que son `lazy loaded`. La página de login tiene un formulario con validación básica y un redireccionamiento a la página de Home.\n\nEn caso que tengas alguna pregunta, siéntete libre para comentar en DEV o enviame un mensaje a mi [twitter](https://twitter.com/derlys_paola)!\n\nMuchas gracias por leerme y hagan mucho código 🤓\n\n\n\n',
  },
  {
    title: 'Tutorial 4: Desplegar una app de Angular CLI a Firebase',
    createdAt: '2020-07-17T15:30:55.088Z',
    id: 'tutorial-4-desplegar-una-app-de-angular-cli-a-firebase-3aij',
    content:
      "---\ntitle: \"Tutorial 4: Desplegar una app de Angular CLI a Firebase\"\ndescription: \"En este tutorial vamos a aprender cómo desplegar nuestra app a Firebase.\"\npublished: true\nseries: \"Introducción a Kikstart UI\"\ncover_image: \"https://dev-to-uploads.s3.amazonaws.com/i/c60ri1xnyuhzrqt7wm2i.png\"\n// canonical_url: \"\"\ntags: angular, kikstart, beginner, espanol\n---\nEn este tutorial vamos a aprender cómo desplegar nuestra app a Firebase. \n\n> 💡 KikstartTip\n> El primer paso solo se realiza una vez por cada app, no es\nnecesario repetirlo.\n\n## Requisitos\n\n- Haber realizado el tutorial 3, donde creamos las rutas.\n- Tener un [proyecto firebase](https://console.firebase.google.com/u/0/)\n\n## Paso # 1\nVamos a agregar @angular/fire\n\n1: Busca en la terminal tu proyecto y ejecuta el siguiente comando:\n\n```bash\nng add @angular/fire\n```\n> 💡 KikstartTip\n>\nSi es la primera vez que instalas @angular/fire en tu computador te hará preguntas como esta:\n`Allow Firebase to collect CLI usage and error reporting information? (Y/n)`.\n\n2: Durante el proceso de instalación sobre el proyecto elige el que quieres desplegar.\n\n```\nInstalling packages for tooling via npm.\nInstalled packages for tooling via npm.\nUPDATE package.json (1516 bytes)\n✔ Packages installed successfully.\n✔ Preparing the list of your Firebase projects\n? Please select a project: (Use arrow keys or type to search)\n❯ site2 (site2-8ce5b)\n```\n## Paso # 2\nConfigura el enviroment con las llaves de tus proyectos en `firebase`.\n\n1: En la consola de `firebase` busca tu proyecto.\n\n2: En descripción general haz clic en configuración del proyecto. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/cv69v4i3s537sv0jrgdp.png)\n\n3: Busca el siguiente título:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/jx0vtqr6e2u6mi3xscnm.png)\n\n4: Busca la ruta `src/enviroments/enviroment.ts` y coloca esta secuencia de comandos con sus respectivas llaves:\n\n```bash\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: '',\n    authDomain: '',\n    databaseURL: '',\n    projectId: '',\n    storageBucket: '',\n    messagingSenderId: '',\n    appId: '',\n    measurementId: '',\n  },\n};\n```\n\n> 💡Tip\n>\nSi quieres tener un proyecto en producción y otro en desarrollo realiza todos este paso en el archivo `enviroment.prod.ts`.\n\n \n## Paso # 3\nEn este paso vamos a desplegar la app. No tenemos que hacer el `ng build` porque este comando lo hace por nosotros.\n\n1: Busca en la terminal tu proyecto y ejecuta el siguiente comando:\n\n```bash\nng deploy\n```\n2: Si todo sale bien te genera el `Hosting URL: https://site2-8ce5b.web.app`. Haz clic en el link y disfruta tu nuevo sitio !!! =)\n\n## Resumen\nEn este tutorial agregamos `@angular/fire`, desplegamos la app y tenemos listo un resultado \nque podemos ver en el navegador.\n\n\nEl repositorio con este paso lo puedes encontrar [aquí](https://github.com/KikstartDev/introduccion-a-kikstart-ui/tree/tutorial-4).\n\n# Muchas gracias!\nTe esperamos en la siguiente serie de `Kikstart UI` =)\nCualquier pregunta sobre esta serie siéntete libre de comentar. \n\n\n\n\n\n\n\n",
  },
  {
    title: 'Tutorial 3: Configurar rutas en una app de Angular CLI',
    createdAt: '2020-07-15T21:57:56.693Z',
    id: 'tutorial-3-configurar-rutas-en-una-app-de-angular-cli-48pg',
    content:
      "---\ntitle: \"Tutorial 3: Configurar rutas en una app de Angular CLI\"\ndescription: \"Crear y configurar rutas\"\npublished: true\nseries: \"Introducción a Kikstart UI\"\ncover_image: \"https://dev-to-uploads.s3.amazonaws.com/i/c60ri1xnyuhzrqt7wm2i.png\"\n// canonical_url: \"\"\ntags: angular, kikstart, beginner, espanol\n---\n\n## Requisitos\n- Haber realizado el tutorial 2, donde creamos nuestro layout.\n\n## Paso # 1\n\nGeneramos los componentes de `home`, `about` y `contact` y configuramos sus rutas.\n\n1: Crea un nuevo componente llamado `home` con el siguiente comando:\n\n```bash\nng generate component home\n```\n2: Crea un nuevo componente llamado `about` con el siguiente comando:\n    \n```bash\nng generate component about\n```\n3: Crea un nuevo componente `contact` escribiendo lo siguiente:\n\n```bash\nng generate component contact\n```\n\n> 💡 KikstartTip\n>\n> Una manera abreviada de crear estos componentes es:\n`ng g c home`\n\n4: Busca la ruta  `src/app/app-routing.module.ts` y agrega lo siguiente en la parte superior.\n\n```typescript\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\nimport { ContactComponent } from './contact/contact.component';\n```\n\n5: Luego agrega en el array de `routes` lo siguiente:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    component: AboutComponent,\n  },\n  {\n    path: 'contact',\n    component: ContactComponent,\n  },\n];\n```\n\n## Paso # 2\nUtiliza `UiLink` para agregar las rutas.\n\n1: Busca la ruta `src/app/app.component.ts` y agrega lo siguiente en la parte superior.\n\n```typescript\nimport { UiLink } from '@kikstart-ui/ui-link';\n```\n2: Luego define en el mismo archivo una propiedad `links` con el tipo `UiLink[]` dentro de la clase `AppComponent`.\n\n\n```typescript\nlinks: UiLink[] = [\n  { label: 'Home', path: '/' },\n  { label: 'About', path: '/about' },\n  { label: 'Contact', path: '/contact' },\n];\n```\n3: En tu editor busca la ruta `src/app/app.component.html` y agrega la propiedad `links` a la etiqueta `<ui-navbar>`.\n\n```html\n<ui-navbar navbarStyle=\"dark\" [brand]=\"brand\" [links]=\"links\"></ui-navbar>\n```\n\n## Paso # 3\n\n`Kikstart UI` tiene una etiqueta que nos deja agregar un componente hero, lo implementamos para cada uno de nuestros componentes.\n\n1: Busca la ruta `src/app/app.module.ts` y agrega lo siguiente en la parte superior:\n\n```typescript\nimport { UiHeroModule } from \"@kikstart-ui/ui-hero\";\n```\n2: Luego agrega `UiHeroModule` en el array imports de `@NgModule`.\n\n```typescript\n...\nimports: [\n  BrowserModule,\n  AppRoutingModule,\n  LayoutWebModule,\n  UiNavbarModule,\n  UiHeroModule,\n],\n...\n```\n3: Busca la ruta `src/app/home/home.component.html` y modifica el template colocando lo siguiente:\n\n ```html\n  <ui-hero title=\"Home\"></ui-hero>\n```\n> 📖 Kikstartpedia\n>\n> Repite el punto 3  para el resto de los componentes `about` y `contact`.\n\n## Resumen\nEn este tutorial creamos 3 componentes,importamos y agregamos estos componentes en el routing y finalmente para visualizar nuestras rutas configuramos los links además de utilizar el `ui-hero` para cambiar cómo se renderizan las paginas.\n\n\nEl repositorio con este paso lo puedes encontrar [aquí](https://github.com/KikstartDev/introduccion-a-kikstart-ui/tree/tutorial-3).\n",
  },
  {
    title: 'Tutorial 2: Instalación de Kikstart UI',
    createdAt: '2020-07-14T20:37:53.238Z',
    id: 'tutorial-2-instalacion-de-kikstart-ui-539j',
    content:
      '---\ntitle: "Tutorial 2: Instalación de Kikstart UI"\ndescription: "En este tutorial aprenderemos que Kikstart UI contiene dependencias que podemos utilizar para construir nuestra app."\npublished: true\nseries: "Introducción a Kikstart UI"\ncover_image: "https://dev-to-uploads.s3.amazonaws.com/i/c60ri1xnyuhzrqt7wm2i.png"\n// canonical_url: ""\ntags: angular, kikstart, beginner, espanol\n---\n\nEn este tutorial aprenderemos que Kikstart UI contiene dependencias que podemos utilizar para construir nuestra app.\n\n## Requisitos\n- Haber realizado el tutorial 1, donde instalamos `Angular CLI` y creamos una app.\n\n## Paso # 1\nEn este paso instalamos los temas de Kikstart UI. Los temas son una versión personalizada de [bootswatch](https://bootswatch.com/) y estos mismos son temas de [bootstrap](https://getbootstrap.com/).\n\n1: Ejecuta el siguiente comando para instalar la dependencia:\n\n```bash\nnpm install @kikstart-ui/themes\n```\n   \n2: Actualiza los estilos de scss, en tu editor busca la ruta\n`src/styles.scss` y agrega lo siguiente:\n\n```scss\n@import "~@kikstart-ui/themes/scss/dark";\n```\n> 📖 kikstartpedia\n>\n> En `Kikstart UI` puedes experimentar con los diferentes styles de layout. Cambia la palabra **dark** en el **@import** por **pirate** o **light** y mira como se ve 😉.     \n\n\n## Paso # 2\nEn este paso instala el `layout-web` y  utilízalo en tu `AppComponent`.\n\n1: Ejecuta el siguiente comando para instalar la dependencia:\n\n```bash\nnpm install @kikstart-ui/layout-web\n```\n2: Busca la ruta `src/app/app.module.ts` y agrega lo siguiente en la parte superior:\n\n```typescript\nimport { LayoutWebModule } from \'@kikstart-ui/layout-web\'\n```\n\n3: Luego agrega `LayoutWebModule` en el array imports de `@NgModule`.\n\n```typescript\n@NgModule({\n  declarations: [\n    AppComponent,  \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    LayoutWebModule \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n4: En tu editor busca la ruta `src/app/app.component.html` y cambia el contenido con:\n\n```html\n<web-layout>\n  <header> header </header>\n  <router-outlet></router-outlet>\n  <footer class="text-center text-muted py-3">\n    Copyright &copy; 2020\n  </footer>\n</web-layout>\n```\n\n## Paso # 3\nEn este paso agrega la navegación principal a tu app. Usa el `UiNavbarModule` y configura el `brand`.\n\n1: Busca la ruta `src/app/app.module.ts` y agrega lo siguiente en la parte superior:\n\n```typescript\nimport { UiNavbarModule} from \'@kikstart-ui/ui-navbar\';\n```\n\n2: Luego agrega `UiNavbarModule` en el array imports de `@NgModule`.\n\n```typescript\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    LayoutWebModule,\n    UiNavbarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n3: Busca la ruta `src/app/app.component.ts` y agrega lo siguiente en la parte superior:\n\n```typescript\nimport { UiBrand} from \'@kikstart-ui/ui-brand\';\n``` \n4: Luego en el mismo archivo define una propiedad `brand` con el tipo `UiBrand`.\n\n```typescript\n export class AppComponent {\n  title = \'site\';\n  brand: UiBrand = {\n    name: \'Site\',\n    logo: \'https://github.com/kikstart-ui.png\',\n  };\n}\n```\n5: En tu editor busca la ruta `src/app/app.component.html` y cambia el header a:\n\n```html\n<header>\n  <ui-navbar navbarStyle="dark" [brand]="brand"></ui-navbar>\n</header>\n```\n\n## Resumen\nPara resumir en este tutorial hemos instalado `Kikstart UI` y sus dependencias, creamos un layout que queda listo para empezar el siguiente tutorial en donde configuraremos nuestras rutas.\n\n\nEl repositorio con este paso lo puedes encontrar [aquí](https://github.com/KikstartDev/introduccion-a-kikstart-ui/tree/tutorial-2).\n',
  },
  {
    title: 'Tutorial 1: Instalando Angular CLI',
    createdAt: '2020-07-06T16:51:54.265Z',
    id: 'tutorial-1-instalando-angular-cli-40ed',
    content:
      '---\ntitle: "Tutorial 1: Instalando Angular CLI"\ndescription: "Esta serie contiene 4 tutoriales en donde aprendemos los primeros pasos para crear una app en angular, utilizamos las herramientas de `Kikstart UI` para crear un layout, configuramos las rutas y finalmente desplegamos nuestra app."\npublished: true\nseries: "Introducción a Kikstart UI"\ncover_image: "https://dev-to-uploads.s3.amazonaws.com/i/c60ri1xnyuhzrqt7wm2i.png"\n// canonical_url: ""\ntags: angular, kikstart, beginner, espanol\n---\n\nEsta serie contiene 4 tutoriales en donde aprendemos los primeros pasos para crear una app en angular, utilizamos las herramientas de `Kikstart UI` para crear un layout, configuramos las rutas y finalmente desplegamos nuestra app.\n\n## Requisitos\n\nAsegúrate de tener instaladas las siguientes herramientas:\n\n- Node.js y NPM, visite la [página de inicio](https://nodejs.org/en/) para obtener instrucciones de instalación.\n    - Ejecute el `node -v` para verificar que tiene la versión 12 o superior.\n    - Ejecute `npm -v` para verificar que tiene la versión 6 o superior.\n\n```bash\n$ node -v\nv14.0.0\n$  npm -v\n6.14.4\n```\n\n\n#### Paso # 1\nInstala `Angular CLI` para empezar el proyecto\n\n1: Abre una terminal  e instala la última versión de `Angular CLI` con el siguiente comando:\n\n```bash\nnpm install -g @angular/cli\n```\n\n> 📖 kikstartpedia\n> \n> El comando anterior tiene `-g` esto significa\n que lo instalaste de manera global, adicionalmente puedes \n averiguar que versión tienes de angular \n con el comando: `ng version`.\n\n\n#### Paso # 2\nCrea una app utilizando angular, en mi ejemplo el nombre de mí app es `site`, tú puedes ponerle el nombre que quieras solo ten en cuenta que sea un nombre corto, claro y genérico \nporque este nombre  utilizaras mucho.\n\n1: Busca la ruta de tu proyecto y digita el siguiente comando:\n\n```bash\nng new site\n```\n\n2: Antes de generar tu app la terminal te preguntará si quieres utilizar rutas o (routing), te sale algo así:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3x3iq0b4o3wy1zm1fqec.png)\n\n3: Respondes `si` digitando la letra `y` y enter.\n\n4: Luego te pregunta por los estilos (styles),te ofrece varias alternativas. Yo elijo SCSS, lo seleccionas y das enter.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/aul9l12snaf46ydfhon0.png)\n\n> 📖 kikstartpedia\n>\n>Si quieres evitar realizar los últimos ítems del paso, puedes hacerlo todo en una sola línea como se muestra en el siguiente comando: `ng new site --routing --style scss`.\n\n\n#### Paso # 3\nEs momento de conocer como quedo tu app y para verlo en un navegador hacemos lo siguiente:\n\n1: Vas a la ruta donde está tu proyecto y ejecutas el siguiente comando:\n\n```bash\nng serve\n```\nCuando está corriendo el sitio te  genera una dirección en el puerto 4200 como este [site]( http://localhost:4200/).\n\n> KikstartDato\n> Angular tambien te preguntara lo siguiente:\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/o88pkg068t62iut22aw9.png)\n\n\n2: Busca la siguiente ruta `src/app/app.component.html`, borra todo el contenido y escribe "Hola kikstart".\n\n## Resumen\nEn este tutorial hemos descargado angular para crear una app, luego hemos modificado uno de sus archivos, por último corrimos la app en un navegador para conocer el resultado.\n\nEste es solo el comienzo para conocer la poderosa plataforma de `Kikstart UI`,continua el siguiente tutorial, conoce las herramientas que `Kikstart UI` tiene para ti.\n\nEl repositorio con este paso lo puedes encontrar [aquí](https://github.com/KikstartDev/introduccion-a-kikstart-ui/tree/tutorial-1).\n\nMuchas gracias a [Laura Ciro](https://dev.to/ltciro) por revisar esta serie!! 🥳\n\n\n\n\n\n\n',
  },
]
